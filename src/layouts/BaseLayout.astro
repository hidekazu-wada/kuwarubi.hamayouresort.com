---
// Props定義
export interface Props {
  pageTitle: string; // ページ固有のタイトル部分
  ogImage?: string;
  pageClass?: string; // ページ固有のクラス名
}

// Propsを受け取る
const {
  pageTitle,
  ogImage = '/default-og-image.jpg',
  pageClass = '',
} = Astro.props;

// サイト名の定数
const SITE_NAME = '光風閣くわるび | 大自然に触れ合いながら学べる大型宿泊施設';

// 統一ディスクリプション
const SITE_DESCRIPTION =
  '富士山の麓にある富士河口湖町西湖の大自然で学ぶ！山と湖に囲まれた環境で自然と触れ合いながら成長できる大型宿泊施設。豊富なアクティビティと充実した設備で、忘れられない体験をご提供します。学生研修旅行・企業研修・ワーケーションに最適です。';

// 完全なタイトルを生成
const fullTitle = pageTitle ? `${pageTitle} | ${SITE_NAME}` : SITE_NAME;

// メインSCSSファイルをインポート
import '../styles/main.scss';

// 画像
import logo from '../assets/images/loading-logo.svg';

// 共通コンポーネントをインポート
import BottomBar from '../components/BottomBar.astro';
import MenuOverlay from '../components/MenuOverlay.astro';
import Sidebar from '../components/Sidebar.astro';
import Footer from '../components/Footer.astro';
import BookingModal from '../components/Booking-modal.astro';
---

<html lang="ja">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>{fullTitle}</title>

    <!-- SEO Meta Tags -->
    <meta name="description" content={SITE_DESCRIPTION} />
    <meta
      name="keywords"
      content="大型宿泊施設,学生研修旅行,企業研修,ワーケーション,自然体験,山梨県,河口湖町,西湖,富士山"
    />

    <!-- Noindex for development -->
    <meta name="robots" content="noindex, nofollow" />

    <!-- OG Tags -->
    <meta property="og:title" content={fullTitle} />
    <meta property="og:description" content={SITE_DESCRIPTION} />
    <meta property="og:image" content={ogImage} />

    <!-- Google Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Allura&family=Zen+Kaku+Gothic+New:wght@400;500;900&display=swap"
      rel="stylesheet"
    />
  </head>
  <body>
    <!-- ローディング要素をbodyの直下の最初に配置 -->
    <div id="loading" class="loading-overlay">
      <img src={logo.src} alt="loading" />
    </div>

    <div class="layout-container">
      <!-- サイドバー -->
      <Sidebar />
      <!-- スマホ専用の下部固定バー -->
      <BottomBar />
      <!-- メニューオーバーレイ -->
      <MenuOverlay />
      <!-- 宿泊予約モーダル -->
      <BookingModal />

      <!-- メインコンテンツ（ページ固有のコンテンツが入る） -->
      <main class={`main-content ${pageClass}`}>
        <slot />
      </main>

      <!-- フッター -->
      <Footer />
    </div>

    <!-- 共通JavaScript -->
    <script>
      // DOMロード後に実行
      document.addEventListener('DOMContentLoaded', () => {
        // メニュー機能
        const pcMenuToggle = document.getElementById('menu-toggle');
        const mobileMenuToggle = document.querySelector('.bottom-bar__toggle');
        const mobileMenuClose = document.querySelector('.menu-overlay__close');
        const menuOverlay = document.getElementById('menu-overlay');
        const sidebar = document.querySelector('.sidebar');

        // メニュー状態管理
        let isMenuOpen = false;

        // メニュー開閉の共通関数
        function toggleMenu() {
          if (!menuOverlay) return;

          isMenuOpen = !isMenuOpen;

          if (isMenuOpen) {
            menuOverlay.classList.add('show');
            if (sidebar) {
              sidebar.classList.add('menu-open');
            }
            // スクロールを禁止
            document.body.style.overflow = 'hidden';
          } else {
            menuOverlay.classList.remove('show');
            if (sidebar) {
              sidebar.classList.remove('menu-open');
            }
            // スクロールを復元
            document.body.style.overflow = '';
          }
        }

        // メニューを閉じる関数
        function closeMenu() {
          if (!menuOverlay) return;

          isMenuOpen = false;
          menuOverlay.classList.remove('show');
          if (sidebar) {
            sidebar.classList.remove('menu-open');
          }
          // スクロールを復元
          document.body.style.overflow = '';
        }

        // 宿泊予約モーダル関連の要素
        const bookingModal = document.querySelector(
          '.booking-modal'
        ) as HTMLElement | null;
        const bookingModalClose = document.querySelector(
          '.booking-modal__close'
        ) as HTMLElement | null;
        const sidebarBookingButton = document.querySelector(
          '.sidebar-menu-button'
        ) as HTMLElement | null;
        const menuOverlayBookingButton = document.querySelector(
          '.menu-overlay__button'
        ) as HTMLElement | null;
        const bottomBarBookingButton = document.querySelector(
          '.bottom-bar__button'
        ) as HTMLElement | null;
        const footerBookingButton = document.querySelector(
          '.footer__nav-link--booking'
        ) as HTMLElement | null;

        // ブッキングモーダルを開く関数
        function openBookingModal() {
          if (bookingModal) {
            bookingModal.style.opacity = '1';
            bookingModal.style.visibility = 'visible';
            // スクロールを禁止
            document.body.style.overflow = 'hidden';
          }
        }

        // ブッキングモーダルを閉じる関数
        function closeBookingModal() {
          if (bookingModal) {
            bookingModal.style.opacity = '0';
            bookingModal.style.visibility = 'hidden';
            // スクロールを復元
            document.body.style.overflow = '';
          }
        }

        // ブッキングモーダル閉じるボタン
        if (bookingModalClose) {
          bookingModalClose.addEventListener('click', closeBookingModal);
        }

        // サイドバーの宿泊予約ボタンクリック（タブレット・デスクトップ）
        if (sidebarBookingButton) {
          sidebarBookingButton.addEventListener('click', (e) => {
            e.preventDefault();
            openBookingModal();
          });
        }

        // メニューオーバーレイの宿泊予約ボタンクリック（スマホメニュー内）
        if (menuOverlayBookingButton) {
          menuOverlayBookingButton.addEventListener('click', (e) => {
            e.preventDefault();
            openBookingModal();
          });
        }

        // スマホ下部バーの宿泊予約ボタンクリック
        if (bottomBarBookingButton) {
          bottomBarBookingButton.addEventListener('click', (e) => {
            e.preventDefault();
            openBookingModal();
          });
        }

        // フッターの宿泊予約ボタンクリック
        if (footerBookingButton) {
          footerBookingButton.addEventListener('click', (e) => {
            e.preventDefault();
            openBookingModal();
          });
        }

        // ブッキングモーダルオーバーレイクリックで閉じる
        if (bookingModal) {
          bookingModal.addEventListener('click', (e) => {
            if (
              e.target === bookingModal ||
              (e.target as HTMLElement).classList.contains(
                'booking-modal__overlay'
              )
            ) {
              closeBookingModal();
            }
          });
        }

        // 必要な要素が存在することを確認してイベントリスナーを設定
        if (menuOverlay) {
          // PCメニューボタン
          if (pcMenuToggle) {
            pcMenuToggle.addEventListener('click', toggleMenu);
          }

          // スマホメニュー開くボタン
          if (mobileMenuToggle) {
            mobileMenuToggle.addEventListener('click', toggleMenu);
          }

          // スマホメニュー閉じるボタン
          if (mobileMenuClose) {
            mobileMenuClose.addEventListener('click', closeMenu);
          }

          // メニュー内の全リンクにイベントリスナーを追加
          const menuLinks = document.querySelectorAll('.menu-overlay__nav-link');
          console.log('[Menu] Found menu links:', menuLinks.length);

          menuLinks.forEach((link) => {
            link.addEventListener('click', (e) => {
              const href = link.getAttribute('href');
              console.log('[Menu] Link clicked:', href);

              // ハッシュリンクの場合（例: /#enjoy）
              if (href?.startsWith('/#')) {
                const hash = href.substring(1); // '/#enjoy' → '#enjoy'
                const currentPath = window.location.pathname;
                console.log('[Menu] Current path:', currentPath);
                console.log('[Menu] Hash:', hash);

                // 同一ページ（トップページ）の場合
                if (currentPath === '/' || currentPath === '/index.html') {
                  console.log('[Menu] Same page detected - closing menu and scrolling');
                  e.preventDefault(); // デフォルトの動作を防止
                  closeMenu(); // メニューを閉じる

                  // スムーススクロール
                  const targetElement = document.querySelector(hash);
                  if (targetElement) {
                    console.log('[Menu] Target element found, scrolling...');
                    targetElement.scrollIntoView({ behavior: 'smooth' });
                  } else {
                    console.warn('[Menu] Target element not found:', hash);
                  }
                } else {
                  console.log('[Menu] Different page - allowing normal navigation');
                  // 別ページの場合は通常の遷移を許可（e.preventDefaultしない）
                }
              }
            });
          });
        }

        // ページロード時にURLハッシュがある場合、該当セクションにスクロール
        const hash = window.location.hash;
        console.log('[Page Load] URL hash:', hash);

        if (hash) {
          console.log('[Page Load] Hash detected, preparing to scroll...');

          // 画像を含む全てのリソースのロード完了を待つ
          window.addEventListener('load', () => {
            console.log('[Page Load] All resources loaded, attempting scroll...');

            // さらに少し遅延を追加（レイアウト調整とローディングアニメーション終了のため）
            setTimeout(() => {
              const targetElement = document.querySelector(hash);
              if (targetElement) {
                console.log('[Page Load] Target element found, scrolling to:', hash);
                targetElement.scrollIntoView({ behavior: 'smooth' });
              } else {
                console.warn('[Page Load] Target element not found:', hash);
              }
            }, 300); // レイアウトシフト完了を待つ
          });
        }
      });

      // ローディング制御機能
      document.addEventListener('DOMContentLoaded', () => {
        // ローディング要素の取得
        const loadingElement = document.getElementById('loading');
        const logoElement = loadingElement?.querySelector('img');

        // セッションストレージから訪問履歴を確認
        const hasVisited = sessionStorage.getItem('hasVisited');

        if (!hasVisited) {
          // 初回訪問の場合
          if (loadingElement) {
            // ローディング要素を表示
            loadingElement.classList.add('show');

            // ロゴのアニメーション（下から上へ移動 + フェードイン）
            setTimeout(() => {
              loadingElement.classList.add('show-logo');
            }, 100); // 少し遅延させてスムーズに

            // 3秒後に全体をフェードアウト
            setTimeout(() => {
              loadingElement.style.transition = 'opacity 0.5s ease-out';
              loadingElement.style.opacity = '0';

              // フェードアウト完了後に要素を完全に非表示
              setTimeout(() => {
                loadingElement.style.display = 'none';
                // レイアウトに影響を与えないよう要素を削除
                loadingElement.remove();
              }, 500); // トランジション時間と合わせる
            }, 3000);
          }

          // 訪問履歴をセッションストレージに保存
          sessionStorage.setItem('hasVisited', 'true');
        } else {
          // 2回目以降の訪問の場合
          // ローディング要素を即座に非表示（CSSで既に非表示なので何もしない）
          if (loadingElement) {
            loadingElement.remove();
          }
        }
      });
    </script>
  </body>

  <style lang="scss">
    // 必要なmixin/functionをインポート
    @import '../styles/variables';
    @import '../styles/functions';
    @import '../styles/mixins';

    /* 基本構造 */
    .layout-container {
      display: grid;
      grid-template:
        'main'
        'footer'
        /1fr;
      min-height: 100vh;
      @include tablet-up {
        grid-template:
          'sidebar main'
          'sidebar footer'
          / tpx($sidebar-width) 1fr;
      }
      @include desktop-up {
        grid-template:
          'sidebar main'
          'sidebar footer'
          / ppx($sidebar-width) 1fr;
      }
    }

    /* メインコンテンツ */
    .main-content {
      grid-area: main;
      position: relative;
    }

    #loading {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      display: none; /* 初期状態は非表示 */
      justify-content: center;
      align-items: center;
      background-color: #fff;
      z-index: 1000;

      &.show {
        display: flex; /* 表示時のみflex */
      }
      img {
        width: spx(239);
        object-fit: cover;
        transform: translateY(30px);
        opacity: 0;
        transition:
          transform 0.6s ease-out,
          opacity 0.6s ease-out;
        @include tablet-up {
          width: tpx(478);
        }
        @include desktop-up {
          width: ppx(361);
        }
      }

      &.show-logo img {
        transform: translateY(0);
        opacity: 1;
      }
    }
  </style>
</html>
