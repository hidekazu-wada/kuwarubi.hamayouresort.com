---
// DaySchedule Component
// 1日のスケジュールをタイムライン形式で表示するコンポーネント
import type { DaySchedule } from '../../../data/schedules';

// Props定義
export interface Props {
  dayData: DaySchedule;
}

const { dayData } = Astro.props;

// dayIdからクラス名プレフィックスを生成
const classPrefix = `enjoy-${dayData.dayId}`;

// 画像
import { getImage } from 'astro:assets';

// 各アイテムの画像をフォーマット
const formattedImages = await Promise.all(
  dayData.items.map(async (item) => {
    return await getImage({
      src: item.image.src,
      format: 'webp',
      widths: [640, 960, 1074],
    });
  })
);

// 画像とアイテムを結合
const itemsWithImages = dayData.items.map((item, index) => ({
  ...item,
  formattedImage: formattedImages[index]
}));

// Swiper CSS
import 'swiper/css';
import 'swiper/css/thumbs';
import 'swiper/css/navigation';
---

<h2 class="schedule-slider__heading">{dayData.dayLabel}</h2>
<div class="schedule-slider__content">
  <div class="schedule-slider__timeline">
    <!-- サムネイルSwiper -->
    <div class={`${classPrefix}__swiper-thumb`}>
      <ol class="schedule-slider__schedule-list swiper-wrapper">
        {
          dayData.items.map((item) => (
            <li class="schedule-slider__schedule-item swiper-slide">
              <div class="schedule-slider__schedule-entry">
                <time class="schedule-slider__time">{item.time}</time>
                <span class="schedule-slider__connector" />
                <span class="schedule-slider__activity">
                  {item.thumbnailTitle}
                </span>
              </div>
            </li>
          ))
        }
      </ol>
    </div>
    <span class="schedule-slider__vertical-line"></span>
  </div>
  <div class="schedule-slider__details" style="position: relative;" data-day-id={dayData.dayId}>
    <!-- メインSwiper -->
    <div class={`${classPrefix}__swiper-main`}>
      <div class="schedule-slider__details-list swiper-wrapper">
        {
          itemsWithImages.map((item) => (
            <article class="schedule-slider__detail-item swiper-slide">
              <div class="schedule-slider__detail-content">
                <div class="schedule-slider__detail-image">
                  <picture class="schedule-slider__picture">
                    {item.formattedImage && (
                      <>
                        <source
                          media="(min-width: 1024px)"
                          srcset={item.formattedImage.srcSet.toString()}
                        />
                        <source
                          media="(min-width: 744px)"
                          srcset={item.formattedImage.srcSet.toString()}
                        />
                        <img
                          src={item.formattedImage.src}
                          alt={item.image.alt}
                          class="schedule-slider__img"
                        />
                      </>
                    )}
                  </picture>
                </div>
                <div class="schedule-slider__detail-text">
                  <time class="schedule-slider__detail-time">{item.time}</time>
                  <h3 class="schedule-slider__detail-title">
                    {item.detailTitle}
                  </h3>
                  <p class="schedule-slider__detail-description">
                    {item.description}
                  </p>
                </div>
              </div>
            </article>
          ))
        }
      </div>
      <!-- Prev/Nextボタン -->
      <button class="schedule-slider__swiper-prev" type="button">
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="100"
          height="100"
          viewBox="0 0 100 100"
          fill="none"
        >
          <circle
            cx="50"
            cy="50"
            r="50"
            transform="matrix(-1 0 0 1 100 0)"
            fill="#59A1C0"></circle>
          <path
            d="M56.6719 66.6654L40.0052 49.9987L56.6719 33.332"
            stroke="white"
            stroke-width="5"
            stroke-linecap="round"
            stroke-linejoin="round"></path>
        </svg>
      </button>
      <button class="schedule-slider__swiper-next" type="button">
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="100"
          height="100"
          viewBox="0 0 100 100"
          fill="none"
        >
          <circle cx="50" cy="50" r="50" fill="#59A1C0"></circle>
          <path
            d="M43.3281 66.6654L59.9948 49.9987L43.3281 33.332"
            stroke="white"
            stroke-width="5"
            stroke-linecap="round"
            stroke-linejoin="round"></path>
        </svg>
      </button>
    </div>
  </div>
</div>

<script>
  // @ts-nocheck
  // Swiper型定義の問題を一時的に無効化（動作には影響なし）
  import Swiper from 'swiper';
  import { Navigation, Thumbs } from 'swiper/modules';

  // ブレークポイント定数（744px = タブレット以上でSwiper有効）
  const TABLET_BP = 744;
  const isTabletUp = () =>
    window.matchMedia(`(min-width: ${TABLET_BP}px)`).matches;

  document.addEventListener('DOMContentLoaded', () => {
    // 各DayScheduleインスタンスごとに初期化
    document.querySelectorAll('[data-day-id]').forEach((dayElement) => {
      const dayId = dayElement.getAttribute('data-day-id');
      if (!dayId) return;

      const thumbSelector = `.enjoy-${dayId}__swiper-thumb`;
      const mainSelector = `.enjoy-${dayId}__swiper-main`;

      let thumbsSwiper: any = null;
      let mainSwiper: any = null;

      const initSwipers = () => {
        // 既に初期化済みなら何もしない（二重初期化防止）
        if (mainSwiper || thumbsSwiper) return;

        console.log(`Initializing Swipers for ${dayId}...`);

      // サムネイルSwiper初期化
      // @ts-ignore
      thumbsSwiper = new Swiper(thumbSelector, {
        modules: [Thumbs], // Thumbsモジュールを追加
        slidesPerView: 'auto',
        freeMode: true,
        watchSlidesProgress: true,
        slideToClickedSlide: true, // クリックしたスライドに移動
      });

      console.log('Thumbs Swiper initialized:', thumbsSwiper);

      // メインSwiper初期化
      // @ts-ignore
      mainSwiper = new Swiper(mainSelector, {
        modules: [Navigation, Thumbs], // Thumbsモジュールを追加
        slidesPerView: 1,
        thumbs: {
          swiper: thumbsSwiper,
        },
        navigation: {
          prevEl: '.schedule-slider__swiper-prev',
          nextEl: '.schedule-slider__swiper-next',
        },
        on: {
          slideChange: function () {
            console.log('Main slide changed to:', this.activeIndex);
            console.log(
              'Thumbs active classes:',
              document.querySelectorAll('.swiper-slide-thumb-active')
            );
          },
        },
      });

      console.log('Main Swiper initialized:', mainSwiper);
      console.log('Thumbs module connected?', mainSwiper.thumbs);

      // サムネイルクリックイベントを手動で追加
      const thumbSlides = document.querySelectorAll(
        `${thumbSelector} .swiper-slide`
      );
      thumbSlides.forEach((slide, index) => {
        slide.addEventListener('click', () => {
          console.log(`Thumbnail ${index} clicked`);
          if (mainSwiper) {
            mainSwiper.slideTo(index);
            console.log(`Moved to slide ${index}`);

            // アクティブクラスの状態を確認
            setTimeout(() => {
              console.log(
                'Active thumb classes after click:',
                document.querySelectorAll('.swiper-slide-thumb-active')
              );
            }, 100);
          }
        });
      });

      // Thumbsモジュールの状態確認
      if (thumbsSwiper) {
        thumbsSwiper.on('slideChange', function () {
          console.log('Thumb slide changed to:', this.activeIndex);
        });
      }
    }; // initSwipers終了

      const destroySwipers = () => {
        // destroy(true, true) = 完全クリーンアップ
        // 第1引数: deleteInstance（インスタンス削除）
        // 第2引数: cleanStyles（付与されたスタイル除去）
        if (mainSwiper) {
          mainSwiper.destroy(true, true);
          mainSwiper = null;
        }
        if (thumbsSwiper) {
          thumbsSwiper.destroy(true, true);
          thumbsSwiper = null;
        }
      };

      const handleResize = () => {
        if (isTabletUp()) {
          initSwipers(); // タブレット以上でSwiper有効
        } else {
          destroySwipers(); // スマホでSwiper無効
        }
      };

      // 初期セットアップ
      handleResize();

      // リサイズイベント（デバウンス付きで負荷軽減）
      let resizeTimer: number;
      window.addEventListener('resize', () => {
        clearTimeout(resizeTimer);
        resizeTimer = setTimeout(handleResize, 150);
      });

      // MediaQueryList変更イベント（より効率的）
      // resizeイベントの代わりにこちらを使うこともできます
      const mediaQuery = window.matchMedia(`(min-width: ${TABLET_BP}px)`);
      if (mediaQuery.addEventListener) {
        mediaQuery.addEventListener('change', handleResize);
      }
    }); // forEach終了
  });
</script>

<style lang="scss">
  @import '../../../styles/variables';
  @import '../../../styles/functions';
  @import '../../../styles/mixins';
  // ============================================================
  // Schedule Slider コンポーネント
  // ============================================================

  .schedule-slider {
    &__heading {
      color: var(--blue_6, #054965);
      text-align: center;
      font-family: 'Zen Kaku Gothic New';
      font-size: spx(60);
      font-style: normal;
      font-weight: 400;
      line-height: 100%; /* 60px */
      @include tablet-up {
        font-size: ppx(60 * 1.2);
      }
      @include desktop-up {
        font-size: ppx(60);
      }
    }

    &__content {
      @include tablet-up {
      }
      @include desktop-up {
      }
    }

    &__timeline {
      @include tablet-up {
      }
      @include desktop-up {
      }
    }

    &__schedule-list {
      @include tablet-up {
        position: relative;
      }
      @include desktop-up {
      }
      &:after {
        @include tablet-up {
          content: '';
          height: 1px;
          width: 94.2%;
          background: var(--blue_4, #59a1c0);
          position: absolute;
          top: 3vw;
          left: 50%;
          transform: translateX(-50%);
        }
        @include desktop-up {
          top: 2.6vw;
        }
      }
    }

    &__schedule-item {
      @include tablet-up {
        cursor: pointer;
      }
      @include desktop-up {
      }
      &.swiper-slide-thumb-active {
        .schedule-slider__time,
        .schedule-slider__activity {
          font-weight: 700;
        }
        .schedule-slider__connector {
          width: 2px;
        }
      }
    }

    &__schedule-entry {
      @include tablet-up {
        display: flex;
        flex-direction: column;
        align-items: center;
      }
      @include desktop-up {
      }
    }

    &__time {
      @include tablet-up {
        color: var(--blue_4, #59a1c0);
        text-align: center;
        font-family: 'Zen Kaku Gothic New';
        font-size: ppx(26 * 1.2);
        font-style: normal;
        font-weight: 400;
        line-height: 200%; /* 52px */
        letter-spacing: ppx(7.8 * 1.2);
        transition: font-weight 0.3s ease;
      }
      @include desktop-up {
        font-size: ppx(26);
        letter-spacing: ppx(7.8);
      }
    }

    &__connector {
      @include tablet-up {
        display: block;
        width: 1px;
        height: ppx(30 * 1.2);
        background: #59a1c0;
        transition: width 0.3s ease;
      }
      @include desktop-up {
        height: ppx(30);
      }
    }

    &__activity {
      @include tablet-up {
        writing-mode: vertical-rl;
        color: var(--blue_4, #59a1c0);
        text-align: center;
        font-family: 'Zen Kaku Gothic New';
        font-size: ppx(26 * 1.2);
        font-style: normal;
        font-weight: 400;
        line-height: 110%; /* 28.6px */
        letter-spacing: ppx(7.8 * 1.2);
        margin-top: ppx(12 * 1.2);
        transition: font-weight 0.3s ease;
      }
      @include desktop-up {
        font-size: ppx(26);
        letter-spacing: ppx(7.8);
        margin-top: ppx(12);
      }
    }

    &__vertical-line {
      @include tablet-up {
      }
      @include desktop-up {
      }
    }

    &__details {
      margin-top: spx(50);
      @include tablet-up {
        margin-top: ppx(71 * 1.2);
      }
      @include desktop-up {
        margin-top: ppx(71);
      }
    }

    &__details-list {
      display: flex;
      flex-direction: column;
      gap: spx(50);
      @include tablet-up {
        flex-direction: row;
        gap: 0;
      }
      @include desktop-up {
      }
    }

    &__detail-item {
      @include tablet-up {
      }
      @include desktop-up {
      }
    }

    &__detail-content {
      width: spx(640);
      border-radius: spx(20);
      background: var(--white, #fff);
      overflow: hidden;
      padding-bottom: spx(40);
      margin-inline: auto;
      @include tablet-up {
        display: flex;
        gap: ppx(83 * 1.2);
        width: ppx(1800 * 1.2);
        border-radius: ppx(30 * 1.2);
        padding-top: ppx(60 * 1.2);
        padding-bottom: ppx(60 * 1.2);
        padding-left: ppx(64 * 1.2);
      }
      @include desktop-up {
        gap: ppx(83);
        width: ppx(1800);
        border-radius: ppx(30);
        padding-top: ppx(60);
        padding-bottom: ppx(60);
        padding-left: ppx(64);
      }
    }

    &__detail-image {
      @include tablet-up {
      }
      @include desktop-up {
      }
    }

    &__picture {
      @include tablet-up {
      }
      @include desktop-up {
      }
    }

    &__img {
      display: block;
      width: spx(640);
      height: spx(390);
      @include tablet-up {
        width: ppx(1074 * 1.2);
        height: ppx(661 * 1.2);
        border-radius: ppx(30 * 1.2);
      }
      @include desktop-up {
        width: ppx(1074);
        height: ppx(661);
        border-radius: ppx(30);
      }
    }

    &__detail-text {
    }

    &__detail-time {
      display: block;
      color: var(--blue_4, #59a1c0);
      text-align: center;
      font-family: 'Zen Kaku Gothic New';
      font-size: spx(37);
      font-style: normal;
      font-weight: 700;
      line-height: 100%; /* 37px */
      letter-spacing: spx(11.1);
      margin-top: spx(40);
      margin-inline: auto;
      width: spx(540);
      @include tablet-up {
        text-align: left;
        font-size: ppx(30 * 1.2);
        line-height: 200%; /* 60px */
        letter-spacing: ppx(9 * 1.2);
        margin-top: ppx(33 * 1.2);
        margin-inline: unset;
        width: ppx(470 * 1.2);
      }
      @include desktop-up {
        font-size: ppx(30);
        letter-spacing: ppx(9);
        margin-top: ppx(33);
        width: ppx(470);
      }
    }

    &__detail-title {
      color: var(--blue_5, #026995);
      text-align: center;
      font-family: 'Zen Kaku Gothic New';
      font-size: spx(42);
      font-style: normal;
      font-weight: 400;
      line-height: 140%; /* 58.8px */
      position: relative;
      padding-bottom: spx(20);
      width: max-content;
      margin-inline: auto;
      margin-top: spx(40);
      width: spx(540);
      @include tablet-up {
        text-align: left;
        font-size: ppx(47 * 1.2);
        line-height: 150%; /* 70.5px */
        padding-bottom: ppx(17 * 1.2);
        margin-inline: unset;
        margin-top: ppx(52 * 1.2);
        width: ppx(470 * 1.2);
      }
      @include desktop-up {
        font-size: ppx(47);
        padding-bottom: ppx(17);
        margin-top: ppx(52);
        width: ppx(470);
      }
      &::after {
        content: '';
        position: absolute;
        left: 50%;
        transform: translateX(-50%);
        bottom: 0;
        width: spx(209);
        height: spx(5);
        background: linear-gradient(
          to right,
          var(--green_2, #adc400) 0%,
          var(--green_2, #adc400) 48.6%,
          transparent 48.6%,
          transparent 51.4%,
          var(--blue_5, #026995) 51.4%,
          var(--blue_5, #026995) 100%
        );
        @include tablet-up {
          left: 0;
          transform: none;
          width: ppx(231 * 1.2);
          height: ppx(5 * 1.2);
        }
        @include desktop-up {
          height: ppx(5);
          width: ppx(231);
        }
      }
    }

    &__detail-description {
      color: var(--blue_6, #054965);
      font-family: 'Zen Kaku Gothic New';
      font-size: spx(28);
      font-style: normal;
      font-weight: 400;
      line-height: 170%; /* 47.6px */
      margin-top: spx(40);
      width: spx(540);
      margin-inline: auto;
      @include tablet-up {
        font-size: ppx(27 * 1.2);
        line-height: 160%; /* 43.2px */
        margin-top: ppx(35 * 1.2);
        width: ppx(470 * 1.2);
        margin-inline: unset;
      }
      @include desktop-up {
        font-size: ppx(27);
        margin-top: ppx(35);
        width: ppx(470);
      }
    }
  }

  // ============================================================
  // Swiper関連のセレクター
  // ============================================================

  // Day1とDay2両方のSwiper thumbスタイル
  .enjoy-day1__swiper-thumb,
  .enjoy-day2__swiper-thumb {
    display: none;
    width: 100%;

    @include tablet-up {
      display: flex;
      margin-top: ppx(132 * 1.2);
    }
    @include desktop-up {
      margin-top: ppx(132);
    }

    .swiper-wrapper {
      @include tablet-up {
        display: flex;
        width: ppx(1659 * 1.2);
        margin-inline: auto;
        justify-content: space-between;
      }
      @include desktop-up {
        width: ppx(1659);
      }
    }

    .swiper-slide {
      @include tablet-up {
        width: max-content;
      }
      @include desktop-up {
      }
    }
  }

  // Day1とDay2両方のSwiper mainスタイル
  .enjoy-day1__swiper-main,
  .enjoy-day2__swiper-main {
    position: relative;
    @include tablet-up {
    }
    @include desktop-up {
    }

    .swiper-wrapper {
      @include tablet-up {
      }
      @include desktop-up {
      }
    }

    .swiper-slide {
      @include tablet-up {
      }
      @include desktop-up {
      }
    }
  }

  // ============================================================
  // Prev/Nextボタン
  // ============================================================

  .schedule-slider__swiper-prev {
    display: none;
    @include tablet-up {
      display: block;
      position: absolute;
      top: 50%;
      left: 0;
      transform: translateY(-50%);
      z-index: 10;
      transition: opacity 0.3s ease;
    }
    @include desktop-up {
      left: 8vw;
    }
    &.swiper-button-disabled {
      opacity: 0.3;
      pointer-events: none;
    }

    @include hover {
      :hover {
        circle {
          fill: #adc400; // ホバー時の円の色
        }
      }
    }

    svg {
      @include tablet-up {
        display: block;
        width: ppx(100) * 1.2;
        height: ppx(100) * 1.2;
      }
      @include desktop-up {
        width: ppx(100);
        height: ppx(100);
      }
    }

    circle {
      transition: fill 0.3s ease;
      @include tablet-up {
      }
      @include desktop-up {
      }
    }

    path {
      @include tablet-up {
      }
      @include desktop-up {
      }
    }
  }

  .schedule-slider__swiper-next {
    display: none;
    @include tablet-up {
      display: block;
      position: absolute;
      top: 50%;
      right: 0;
      transform: translateY(-50%);
      z-index: 10;
      transition: opacity 0.3s ease;
    }
    @include desktop-up {
      right: 8vw;
    }

    &.swiper-button-disabled {
      opacity: 0.3;
      pointer-events: none;
    }

    @include hover {
      :hover {
        circle {
          fill: #adc400; // ホバー時の円の色
        }
      }
    }

    svg {
      @include tablet-up {
        display: block;
        width: ppx(100) * 1.2;
        height: ppx(100) * 1.2;
      }
      @include desktop-up {
        width: ppx(100);
        height: ppx(100);
      }
    }

    circle {
      transition: fill 0.3s ease;
      @include tablet-up {
      }
      @include desktop-up {
      }
    }

    path {
      @include tablet-up {
      }
      @include desktop-up {
      }
    }
  }
</style>
