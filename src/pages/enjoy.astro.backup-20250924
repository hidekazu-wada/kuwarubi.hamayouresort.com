---
// ============================================================
// 汎用ページテンプレート
// 使い方：このファイルをコピーして、ファイル名を変更して使用
// 例：cp src/pages/_template.astro src/pages/about.astro
// ============================================================

// 必須インポート
import BaseLayout from '../layouts/BaseLayout.astro';
import Breadcrumb from '../components/ui/Breadcrumb.astro';
import ScheduleSlider from '../components/ScheduleSlider.astro';

// 画像インポート
import slide_day1_01_image from '../assets/images/enjoy/slide-day-1/slide-01.jpg';
import slide_day1_02_image from '../assets/images/enjoy/slide-day-1/slide-02.jpg';
import slide_day1_03_image from '../assets/images/enjoy/slide-day-1/slide-03.jpg';
import slide_day1_04_image from '../assets/images/enjoy/slide-day-1/slide-04.jpg';
import slide_day1_05_image from '../assets/images/enjoy/slide-day-1/slide-05.jpg';
import slide_day1_06_image from '../assets/images/enjoy/slide-day-1/slide-06.jpg';
import slide_day1_07_image from '../assets/images/enjoy/slide-day-1/slide-07.jpg';

// Day1スケジュールデータ
const day1ScheduleData = [
  {
    time: '15:00',
    title: 'チェックイン',
    thumbnailTitle: 'チェックイン',
    description: '静謐な西湖の湖畔に佇むホテルへ、木々のざわめきが出迎えてくれます。チェックインカウンターでは、清々しい山の空気と共に、穏やかなスタッフの笑顔がお待ちしています。荷物を預け、深呼吸一つで、日常のせわしなさが溶けていくのを感じていただけるはずです。',
    image: {
      src: slide_day1_01_image,
      alt: 'チェックイン'
    }
  },
  {
    time: '16:00',
    title: '周辺散歩',
    thumbnailTitle: '周辺散歩',
    description: '静謐な西湖の湖畔に佇むホテルへ、木々のざわめきが出迎えてくれます。チェックインカウンターでは、清々しい山の空気と共に、穏やかなスタッフの笑顔がお待ちしています。荷物を預け、深呼吸一つで、日常のせわしなさが溶けていくのを感じていただけるはずです。',
    image: {
      src: slide_day1_02_image,
      alt: '周辺散歩'
    }
  },
  {
    time: '17:00',
    title: '森のサウナ',
    thumbnailTitle: '森のサウナ',
    description: '静謐な西湖の湖畔に佇むホテルへ、木々のざわめきが出迎えてくれます。チェックインカウンターでは、清々しい山の空気と共に、穏やかなスタッフの笑顔がお待ちしています。荷物を預け、深呼吸一つで、日常のせわしなさが溶けていくのを感じていただけるはずです。',
    image: {
      src: slide_day1_03_image,
      alt: '森のサウナ'
    }
  },
  {
    time: '18:00',
    title: '夕食',
    thumbnailTitle: '夕食',
    description: '静謐な西湖の湖畔に佇むホテルへ、木々のざわめきが出迎えてくれます。チェックインカウンターでは、清々しい山の空気と共に、穏やかなスタッフの笑顔がお待ちしています。荷物を預け、深呼吸一つで、日常のせわしなさが溶けていくのを感じていただけるはずです。',
    image: {
      src: slide_day1_04_image,
      alt: '夕食'
    }
  },
  {
    time: '20:00',
    title: '入浴',
    thumbnailTitle: '入浴',
    description: '静謐な西湖の湖畔に佇むホテルへ、木々のざわめきが出迎えてくれます。チェックインカウンターでは、清々しい山の空気と共に、穏やかなスタッフの笑顔がお待ちしています。荷物を預け、深呼吸一つで、日常のせわしなさが溶けていくのを感じていただけるはずです。',
    image: {
      src: slide_day1_05_image,
      alt: '入浴'
    }
  },
  {
    time: '21:00',
    title: 'ナイトハイク',
    thumbnailTitle: 'ナイトハイク',
    description: '静謐な西湖の湖畔に佇むホテルへ、木々のざわめきが出迎えてくれます。チェックインカウンターでは、清々しい山の空気と共に、穏やかなスタッフの笑顔がお待ちしています。荷物を預け、深呼吸一つで、日常のせわしなさが溶けていくのを感じていただけるはずです。',
    image: {
      src: slide_day1_06_image,
      alt: 'ナイトハイク'
    }
  },
  {
    time: '22:00',
    title: '就寝',
    thumbnailTitle: '就寝',
    description: '静謐な西湖の湖畔に佇むホテルへ、木々のざわめきが出迎えてくれます。チェックインカウンターでは、清々しい山の空気と共に、穏やかなスタッフの笑顔がお待ちしています。荷物を預け、深呼吸一つで、日常のせわしなさが溶けていくのを感じていただけるはずです。',
    image: {
      src: slide_day1_07_image,
      alt: '就寝'
    }
  }
];

// ページ設定
const pageTitle = 'くわるび体験';
const pageDescription = 'このページの詳細な説明文。';
---

<BaseLayout
  pageTitle={pageTitle}
  pageDescription={pageDescription}
  pageOgp="/images/ogp/default.jpg"
  addFooter={true}
  addMenu={true}
  isTopPage={false}
>
  <!-- Day 1 -->
  <ScheduleSlider
    heading="Day 1"
    swiperId="enjoy-day1"
    detailItems={day1ScheduleData}
  />
</BaseLayout>

<style lang="scss">
  // SCSS変数、ミックスイン、関数のインポート
  @import '../styles/variables';
  @import '../styles/functions';
  @import '../styles/mixins';

  // このページ固有のスタイルをここに記述
  // 例：
  // .page-title {
  //   color: var(--blue_5);
  //   font-size: spx(40);
  //   @include tablet-up {
  //     font-size: ppx(50 * 1.2);
  //   }
  //   @include desktop-up {
  //     font-size: ppx(50);
  //   }
  // }
</style>

<script>
  import { Navigation, Thumbs } from 'swiper/modules';
  import type Swiper from 'swiper';

  // Swiper 初期化
  function initSwipers(): void {
    const isMobile = window.innerWidth < 744;

    // enjoy-day1 Swiper
    if (!isMobile) {
      const enjoyDay1ThumbsSwiper = new (window as any).Swiper('.enjoy-day1__swiper-thumb', {
        modules: [Thumbs],
        slidesPerView: 'auto',
        spaceBetween: 45,
        watchSlidesProgress: true,
        slideToClickedSlide: true,
      });

      const enjoyDay1MainSwiper = new (window as any).Swiper('.enjoy-day1__swiper-main', {
        modules: [Navigation, Thumbs],
        spaceBetween: 0,
        navigation: {
          nextEl: '.schedule-slider__swiper-next',
          prevEl: '.schedule-slider__swiper-prev',
        },
        thumbs: {
          swiper: enjoyDay1ThumbsSwiper,
        },
        on: {
          slideChange: function() {
            // サムネイルSwiper が存在することを確認
            if (enjoyDay1ThumbsSwiper && enjoyDay1ThumbsSwiper.slides) {
              const activeIndex = enjoyDay1MainSwiper.activeIndex;
              // サムネイル も同期
              if (enjoyDay1ThumbsSwiper.slides[activeIndex]) {
                enjoyDay1ThumbsSwiper.slideTo(activeIndex);
              }
            }
          }
        }
      });

      // グローバルに保存
      (window as any).enjoyDay1MainSwiper = enjoyDay1MainSwiper;
      (window as any).enjoyDay1ThumbsSwiper = enjoyDay1ThumbsSwiper;
    }
  }

  // Swiper 破棄
  function destroySwipers(): void {
    const enjoyDay1MainSwiper = (window as any).enjoyDay1MainSwiper;
    const enjoyDay1ThumbsSwiper = (window as any).enjoyDay1ThumbsSwiper;

    if (enjoyDay1MainSwiper) {
      enjoyDay1MainSwiper.destroy(true, true);
      delete (window as any).enjoyDay1MainSwiper;
    }
    if (enjoyDay1ThumbsSwiper) {
      enjoyDay1ThumbsSwiper.destroy(true, true);
      delete (window as any).enjoyDay1ThumbsSwiper;
    }
  }

  // 初期化処理
  let resizeTimer: ReturnType<typeof setTimeout>;
  let lastWidth = window.innerWidth;

  function handleResize(): void {
    clearTimeout(resizeTimer);
    resizeTimer = setTimeout(() => {
      const currentWidth = window.innerWidth;
      const wasMobile = lastWidth < 744;
      const isMobile = currentWidth < 744;

      if (wasMobile !== isMobile) {
        destroySwipers();
        if (!isMobile) {
          initSwipers();
        }
      }

      lastWidth = currentWidth;
    }, 250);
  }

  // 初期ロード時
  document.addEventListener('DOMContentLoaded', () => {
    initSwipers();
  });

  // リサイズ時の処理
  window.addEventListener('resize', handleResize);
</script>