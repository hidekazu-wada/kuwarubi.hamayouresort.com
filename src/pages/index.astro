---
// メインSCSSファイルをインポート
import '../styles/main.scss';
// Swiper styles
import 'swiper/css';
import 'swiper/css/navigation';
import 'swiper/css/pagination';
import 'swiper/css/effect-fade';
import BottomBar from '../components/BottomBar.astro';
import MenuOverlay from '../components/MenuOverlay.astro';
import Sidebar from '../components/Sidebar.astro';
import Footer from '../components/Footer.astro';

import { getImage } from 'astro:assets';
import hero1Desktop from '../assets/images/top/hero-slide/hero_1_desktop.png';
import hero1Tablet from '../assets/images/top/hero-slide/hero_1_tablet.png';
import hero1Mobile from '../assets/images/top/hero-slide/hero_1_mobile.png';

import hero2Desktop from '../assets/images/top/hero-slide/hero_2_desktop.png';
import hero2Tablet from '../assets/images/top/hero-slide/hero_2_tablet.png';
import hero2Mobile from '../assets/images/top/hero-slide/hero_2_mobile.png';

import hero3Desktop from '../assets/images/top/hero-slide/hero_3_desktop.png';
import hero3Tablet from '../assets/images/top/hero-slide/hero_3_tablet.png';
import hero3Mobile from '../assets/images/top/hero-slide/hero_3_mobile.png';

import hero4Desktop from '../assets/images/top/hero-slide/hero_4_desktop.png';
import hero4Tablet from '../assets/images/top/hero-slide/hero_4_tablet.png';
import hero4Mobile from '../assets/images/top/hero-slide/hero_4_mobile.png';

import logoKuwarubi from '../assets/images/logo_kuwarubi.svg';
import heroMovieThumb from '../assets/images/top/play-movie/thumbnail.png';

const hero1DesktopWebp = await getImage({
  src: hero1Desktop,
  format: 'webp',
  widths: [1280, 1920],
});
const hero1TabletWebp = await getImage({
  src: hero1Tablet,
  format: 'webp',
  widths: [640, 768],
});
const hero1MobileWebp = await getImage({
  src: hero1Mobile,
  format: 'webp',
  widths: [360, 640],
});

const hero2DesktopWebp = await getImage({
  src: hero2Desktop,
  format: 'webp',
  widths: [1280, 1920],
});
const hero2TabletWebp = await getImage({
  src: hero2Tablet,
  format: 'webp',
  widths: [640, 768],
});
const hero2MobileWebp = await getImage({
  src: hero2Mobile,
  format: 'webp',
  widths: [360, 640],
});

const hero3DesktopWebp = await getImage({
  src: hero3Desktop,
  format: 'webp',
  widths: [1280, 1920],
});
const hero3TabletWebp = await getImage({
  src: hero3Tablet,
  format: 'webp',
  widths: [640, 768],
});
const hero3MobileWebp = await getImage({
  src: hero3Mobile,
  format: 'webp',
  widths: [360, 640],
});

const hero4DesktopWebp = await getImage({
  src: hero4Desktop,
  format: 'webp',
  widths: [1280, 1920],
});
const hero4TabletWebp = await getImage({
  src: hero4Tablet,
  format: 'webp',
  widths: [640, 768],
});
const hero4MobileWebp = await getImage({
  src: hero4Mobile,
  format: 'webp',
  widths: [360, 640],
});

const heroMovieThumbWebp = await getImage({
  src: heroMovieThumb,
  format: 'webp',
  widths: [309, 515],
});
---

<html lang="ja">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>Astro</title>
    <!-- Google Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Zen+Kaku+Gothic+New:wght@400;500;900&display=swap"
      rel="stylesheet"
    />
  </head>
  <body>
    <div class="layout-container">
      <!-- サイドバー -->
      <Sidebar />
      <!-- スマホ専用の下部固定バー -->
      <BottomBar />
      <!-- メニューオーバーレイ -->
      <MenuOverlay />
      <!-- 動画モーダル（メニューオーバーレイより上位階層） -->
      <div class="video-modal" id="video-modal">
        <div class="video-modal__overlay">
          <div class="video-modal__container">
            <div class="video-modal__content">
              <iframe
                width="560"
                height="315"
                src="https://www.youtube.com/embed/kFndXFT2bbE?si=jzYQBtsAED26-HCu&autoplay=1&mute=1"
                title="YouTube video player"
                frameborder="0"
                allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
                referrerpolicy="strict-origin-when-cross-origin"
                allowfullscreen></iframe>
            </div>
            <button class="video-modal__close">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="80"
                height="80"
                viewBox="0 0 80 80"
                fill="none"
              >
                <circle cx="40" cy="40" r="40" fill="#59A1C0"></circle>
                <path
                  d="M27.0762 51.6953L51.6916 27.0799"
                  stroke="white"
                  stroke-width="4.06111"
                  stroke-linecap="round"
                  stroke-linejoin="round"></path>
                <path
                  d="M27.0762 27.0781L51.6916 51.6935"
                  stroke="white"
                  stroke-width="4.06111"
                  stroke-linecap="round"
                  stroke-linejoin="round"></path>
              </svg>
            </button>
          </div>
        </div>
      </div>
      <!-- 宿泊予約モーダル（動画モーダルと同等階層） -->
      <div class="booking-modal" id="booking-modal">
        <div class="booking-modal__overlay">
          <div class="booking-modal__container">
            <div class="booking-modal__content">
              <nav class="booking-modal__nav" aria-label="宿泊予約サイト選択">
                <ul class="booking-modal__list">
                  <li class="booking-modal__item">
                    <a href="#" class="booking-modal__link">
                      <span class="booking-modal__text">じゃらんで予約</span>
                      <svg
                        class="booking-modal__arrow"
                        xmlns="http://www.w3.org/2000/svg"
                        width="18"
                        height="34"
                        viewBox="0 0 18 34"
                        fill="none"
                        aria-hidden="true"
                      >
                        <path
                          d="M1 33L17 17L1 1"
                          stroke="#054965"
                          stroke-width="2"
                          stroke-linecap="round"
                          stroke-linejoin="round"></path>
                      </svg>
                    </a>
                  </li>
                  <li class="booking-modal__item">
                    <a href="#" class="booking-modal__link">
                      <span class="booking-modal__text">楽天トラベルで予約</span
                      >
                      <svg
                        class="booking-modal__arrow"
                        xmlns="http://www.w3.org/2000/svg"
                        width="18"
                        height="34"
                        viewBox="0 0 18 34"
                        fill="none"
                        aria-hidden="true"
                      >
                        <path
                          d="M1 33L17 17L1 1"
                          stroke="#054965"
                          stroke-width="2"
                          stroke-linecap="round"
                          stroke-linejoin="round"></path>
                      </svg>
                    </a>
                  </li>
                </ul>
              </nav>
            </div>
            <button class="booking-modal__close">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="80"
                height="80"
                viewBox="0 0 80 80"
                fill="none"
              >
                <circle cx="40" cy="40" r="40" fill="#59A1C0"></circle>
                <path
                  d="M27.0762 51.6953L51.6916 27.0799"
                  stroke="white"
                  stroke-width="4.06111"
                  stroke-linecap="round"
                  stroke-linejoin="round"></path>
                <path
                  d="M27.0762 27.0781L51.6916 51.6935"
                  stroke="white"
                  stroke-width="4.06111"
                  stroke-linecap="round"
                  stroke-linejoin="round"></path>
              </svg>
            </button>
          </div>
        </div>
      </div>
      <!-- メインコンテンツ -->
      <main class="main-content">
        <!-- ヒーローセクション -->
        <div class="hero">
          <div class="swiper">
            <div class="swiper-wrapper">
              <div class="swiper-slide">
                <div class="slide-content">
                  <picture>
                    <source
                      srcset={hero1DesktopWebp.src}
                      media="(min-width:1024px)"
                      sizes="100vw"
                      type="image/webp"
                    />
                    <source
                      srcset={hero1TabletWebp.srcSet.attribute}
                      media="(min-width:744px)"
                      sizes="100vw"
                      type="image/webp"
                    />
                    <source
                      srcset={hero1MobileWebp.srcSet.attribute}
                      sizes="100vw"
                      type="image/webp"
                    />
                    <img
                      src={hero1Mobile.src}
                      width={hero1Mobile.width}
                      height={hero1Mobile.height}
                      alt="ヒーローイメージ"
                      loading="eager"
                      decoding="async"
                    />
                  </picture>
                </div>
              </div>
              <div class="swiper-slide">
                <div class="slide-content">
                  <picture>
                    <source
                      srcset={hero2DesktopWebp.src}
                      media="(min-width:1024px)"
                      sizes="100vw"
                      type="image/webp"
                    />
                    <source
                      srcset={hero2TabletWebp.srcSet.attribute}
                      media="(min-width:744px)"
                      sizes="100vw"
                      type="image/webp"
                    />
                    <source
                      srcset={hero2MobileWebp.srcSet.attribute}
                      sizes="100vw"
                      type="image/webp"
                    />
                    <img
                      src={hero2Mobile.src}
                      width={hero2Mobile.width}
                      height={hero2Mobile.height}
                      alt="ヒーローイメージ"
                      loading="eager"
                      decoding="async"
                    />
                  </picture>
                </div>
              </div>
              <div class="swiper-slide">
                <div class="slide-content">
                  <picture>
                    <source
                      srcset={hero3DesktopWebp.src}
                      media="(min-width:1024px)"
                      sizes="100vw"
                      type="image/webp"
                    />
                    <source
                      srcset={hero3TabletWebp.srcSet.attribute}
                      media="(min-width:744px)"
                      sizes="100vw"
                      type="image/webp"
                    />
                    <source
                      srcset={hero3MobileWebp.srcSet.attribute}
                      sizes="100vw"
                      type="image/webp"
                    />
                    <img
                      src={hero3Mobile.src}
                      width={hero3Mobile.width}
                      height={hero3Mobile.height}
                      alt="ヒーローイメージ"
                      loading="eager"
                      decoding="async"
                    />
                  </picture>
                </div>
              </div>
              <div class="swiper-slide">
                <div class="slide-content">
                  <picture>
                    <source
                      srcset={hero4DesktopWebp.src}
                      media="(min-width:1024px)"
                      sizes="100vw"
                      type="image/webp"
                    />
                    <source
                      srcset={hero4TabletWebp.srcSet.attribute}
                      media="(min-width:744px)"
                      sizes="100vw"
                      type="image/webp"
                    />
                    <source
                      srcset={hero4MobileWebp.srcSet.attribute}
                      sizes="100vw"
                      type="image/webp"
                    />
                    <img
                      src={hero4Mobile.src}
                      width={hero4Mobile.width}
                      height={hero4Mobile.height}
                      alt="ヒーローイメージ"
                      loading="eager"
                      decoding="async"
                    />
                  </picture>
                </div>
              </div>
            </div>
          </div>
          <h1 class="hero__logo">
            <img
              src={logoKuwarubi.src}
              alt="光風閣くわるび"
              class="hero__logo only-sp"
              loading="lazy"
              decoding="async"
            />
          </h1>
          <h2 class="hero__title">
            <span class="hero__title-text hero__title-text--first">自然</span>
            <span class="hero__title-text hero__title-text--second">から</span>
            <span class="hero__title-text hero__title-text--third">学ぶ</span>
            <span class="hero__title-text hero__title-text--fourth"
              >Learn from Nature</span
            >
          </h2>
          <div class="hero__movie">
            <div class="hero__movie-container">
              <picture class="hero__movie-thumbnail">
                <source
                  srcset={heroMovieThumbWebp.srcSet.attribute}
                  sizes="(min-width: 744px) 515px, 309px"
                  type="image/webp"
                />
                <img
                  src={heroMovieThumb.src}
                  width={heroMovieThumb.width}
                  height={heroMovieThumb.height}
                  alt="動画サムネイル"
                  loading="lazy"
                  decoding="async"
                />
              </picture>
              <div class="hero__movie-close">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="65"
                  height="65"
                  viewBox="0 0 65 65"
                  fill="none"
                >
                  <circle cx="32.5" cy="32.5" r="32.5" fill="#E7F3F9"></circle>
                  <path
                    d="M22 42L42 22"
                    stroke="#026995"
                    stroke-width="3.4"
                    stroke-linecap="round"
                    stroke-linejoin="round"></path>
                  <path
                    d="M22 22L42 42"
                    stroke="#026995"
                    stroke-width="3.4"
                    stroke-linecap="round"
                    stroke-linejoin="round"></path>
                </svg>
              </div>
              <div class="hero__movie-controls">
                <div class="hero__movie-play-icon">
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    width="109"
                    height="109"
                    viewBox="0 0 109 109"
                    fill="none"
                  >
                    <circle
                      cx="54.5"
                      cy="54.5"
                      r="53"
                      stroke="white"
                      stroke-width="3"></circle>
                    <path
                      d="M75.9951 54.768C77.3285 55.5378 77.3284 57.4623 75.9951 58.2321L45.2451 75.9856C43.9118 76.7554 42.2451 75.7931 42.2451 74.2535L42.2451 38.7465C42.2451 37.2069 43.9118 36.2446 45.2451 37.0144L75.9951 54.768Z"
                      fill="white"></path>
                  </svg>
                </div>
                <div class="hero__movie-play-text">PLAY MOVIE</div>
              </div>
            </div>
          </div>
        </div>
      </main>
      <!-- フッター -->
      <Footer />
    </div>

    <script>
      // Swiperインポート
      import Swiper from 'swiper';
      import { Autoplay, EffectFade } from 'swiper/modules';

      // DOMロード後に実行
      document.addEventListener('DOMContentLoaded', () => {
        // Swiper初期化
        const swiper = new Swiper('.swiper', {
          modules: [Autoplay, EffectFade],
          effect: 'fade',
          loop: true,
          autoplay: { delay: 5000, disableOnInteraction: false }, // スライド表示時間: 5秒
          speed: 2500, // フェード切り替え速度: 2.5秒（独立して調整可能）
        });

        // メニュー機能
        const pcMenuToggle = document.getElementById('menu-toggle');
        const mobileMenuToggle = document.querySelector('.bottom-bar__toggle');
        const mobileMenuClose = document.querySelector('.menu-overlay__close');
        const menuOverlay = document.getElementById('menu-overlay');
        const sidebar = document.querySelector('.sidebar');

        // メニュー状態管理
        let isMenuOpen = false;

        // メニュー開閉の共通関数
        function toggleMenu() {
          if (!menuOverlay) return;

          isMenuOpen = !isMenuOpen;

          if (isMenuOpen) {
            menuOverlay.classList.add('show');
            if (sidebar) {
              sidebar.classList.add('menu-open');
            }
            // スクロールを禁止
            document.body.style.overflow = 'hidden';
          } else {
            menuOverlay.classList.remove('show');
            if (sidebar) {
              sidebar.classList.remove('menu-open');
            }
            // スクロールを復元
            document.body.style.overflow = '';
          }
        }

        // メニューを閉じる関数
        function closeMenu() {
          if (!menuOverlay) return;

          isMenuOpen = false;
          menuOverlay.classList.remove('show');
          if (sidebar) {
            sidebar.classList.remove('menu-open');
          }
          // スクロールを復元
          document.body.style.overflow = '';
        }

        // ヒーロームービー関連の要素
        const heroMovie = document.querySelector(
          '.hero__movie'
        ) as HTMLElement | null;
        const heroMovieClose = document.querySelector(
          '.hero__movie-close'
        ) as HTMLElement | null;

        // ヒーロームービーを閉じる関数
        function closeHeroMovie() {
          if (heroMovie) {
            heroMovie.style.opacity = '0';
            heroMovie.style.visibility = 'hidden';
          }
        }

        // ヒーロームービーのクローズボタン
        if (heroMovieClose) {
          heroMovieClose.addEventListener('click', closeHeroMovie);
        }

        // 動画モーダル関連の要素
        const videoModal = document.querySelector(
          '.video-modal'
        ) as HTMLElement | null;
        const videoModalClose = document.querySelector(
          '.video-modal__close'
        ) as HTMLElement | null;
        const heroMovieThumbnail = document.querySelector(
          '.hero__movie-thumbnail'
        ) as HTMLElement | null;
        const heroMoviePlayIcon = document.querySelector(
          '.hero__movie-play-icon'
        ) as HTMLElement | null;
        const heroMoviePlayText = document.querySelector(
          '.hero__movie-play-text'
        ) as HTMLElement | null;
        const videoIframe = document.querySelector(
          '.video-modal iframe'
        ) as HTMLIFrameElement | null;

        // 動画モーダルを開く関数
        function openVideoModal() {
          if (videoModal) {
            videoModal.style.opacity = '1';
            videoModal.style.visibility = 'visible';
            // スクロールを禁止
            document.body.style.overflow = 'hidden';
          }
        }

        // 動画モーダルを閉じる関数
        function closeVideoModal() {
          if (videoModal && videoIframe) {
            videoModal.style.opacity = '0';
            videoModal.style.visibility = 'hidden';
            // 動画を停止（iframe srcを再設定）
            const currentSrc = videoIframe.src;
            videoIframe.src = '';
            videoIframe.src = currentSrc;
            // スクロールを復元
            document.body.style.overflow = '';
          }
        }

        // サムネイルクリックで動画モーダルを開く
        if (heroMovieThumbnail) {
          heroMovieThumbnail.addEventListener('click', openVideoModal);
        }

        // 再生アイコンクリックで動画モーダルを開く
        if (heroMoviePlayIcon) {
          heroMoviePlayIcon.addEventListener('click', openVideoModal);
        }

        // 再生テキストクリックで動画モーダルを開く
        if (heroMoviePlayText) {
          heroMoviePlayText.addEventListener('click', openVideoModal);
        }

        // モーダル閉じるボタン
        if (videoModalClose) {
          videoModalClose.addEventListener('click', closeVideoModal);
        }

        // オーバーレイクリックで閉じる（任意）
        if (videoModal) {
          videoModal.addEventListener('click', (e) => {
            if (
              e.target === videoModal ||
              (e.target as HTMLElement).classList.contains(
                'video-modal__overlay'
              )
            ) {
              closeVideoModal();
            }
          });
        }

        // ブッキングモーダル関連の要素
        const bookingModal = document.querySelector(
          '.booking-modal'
        ) as HTMLElement | null;
        const bookingModalClose = document.querySelector(
          '.booking-modal__close'
        ) as HTMLElement | null;
        const sidebarBookingButton = document.querySelector(
          '.sidebar-menu-button'
        ) as HTMLElement | null;
        const menuOverlayBookingButton = document.querySelector(
          '.menu-overlay__button'
        ) as HTMLElement | null;
        const bottomBarBookingButton = document.querySelector(
          '.bottom-bar__button'
        ) as HTMLElement | null;

        // ブッキングモーダルを開く関数
        function openBookingModal() {
          if (bookingModal) {
            bookingModal.style.opacity = '1';
            bookingModal.style.visibility = 'visible';
            // スクロールを禁止
            document.body.style.overflow = 'hidden';
          }
        }

        // ブッキングモーダルを閉じる関数
        function closeBookingModal() {
          if (bookingModal) {
            bookingModal.style.opacity = '0';
            bookingModal.style.visibility = 'hidden';
            // スクロールを復元
            document.body.style.overflow = '';
          }
        }

        // ブッキングモーダル閉じるボタン
        if (bookingModalClose) {
          bookingModalClose.addEventListener('click', closeBookingModal);
        }

        // サイドバーの宿泊予約ボタンクリック（タブレット・デスクトップ）
        if (sidebarBookingButton) {
          sidebarBookingButton.addEventListener('click', (e) => {
            e.preventDefault();
            openBookingModal();
          });
        }

        // メニューオーバーレイの宿泊予約ボタンクリック（スマホメニュー内）
        if (menuOverlayBookingButton) {
          menuOverlayBookingButton.addEventListener('click', (e) => {
            e.preventDefault();
            openBookingModal();
          });
        }

        // スマホ下部バーの宿泊予約ボタンクリック
        if (bottomBarBookingButton) {
          bottomBarBookingButton.addEventListener('click', (e) => {
            e.preventDefault();
            openBookingModal();
          });
        }

        // ブッキングモーダルオーバーレイクリックで閉じる
        if (bookingModal) {
          bookingModal.addEventListener('click', (e) => {
            if (
              e.target === bookingModal ||
              (e.target as HTMLElement).classList.contains(
                'booking-modal__overlay'
              )
            ) {
              closeBookingModal();
            }
          });
        }

        // BottomBarスクロール表示制御（トップページのみ）
        const bottomBar = document.querySelector(
          '.bottom-bar'
        ) as HTMLElement | null;
        const isTopPage =
          window.location.pathname === '/' ||
          window.location.pathname === '/index.html';

        if (bottomBar && isTopPage) {
          // トップページでは初期状態で非表示
          bottomBar.classList.add('hide-on-top');

          let scrollTimeout: number | null = null;

          // スクロールイベント（スロットリング付き）
          function handleScroll() {
            if (scrollTimeout) {
              clearTimeout(scrollTimeout);
            }

            scrollTimeout = window.setTimeout(() => {
              if (!bottomBar) return; // bottomBarがnullの場合は早期リターン

              const scrollY = window.scrollY;
              const scrollThreshold = 30; // 30px閾値

              if (scrollY > scrollThreshold) {
                // 30px以上スクロール：表示
                bottomBar.classList.remove('hide-on-top');
                bottomBar.classList.add('show-on-scroll');
              } else {
                // 30px以下：非表示
                bottomBar.classList.add('hide-on-top');
                bottomBar.classList.remove('show-on-scroll');
              }
            }, 16); // 60FPSに合わせて16ms間隔
          }

          window.addEventListener('scroll', handleScroll);

          // 初期スクロール位置チェック
          handleScroll();
        }

        // 必要な要素が存在することを確認してイベントリスナーを設定
        if (menuOverlay) {
          // PCメニューボタン
          if (pcMenuToggle) {
            pcMenuToggle.addEventListener('click', toggleMenu);
          }

          // スマホメニュー開くボタン
          if (mobileMenuToggle) {
            mobileMenuToggle.addEventListener('click', toggleMenu);
          }

          // スマホメニュー閉じるボタン
          if (mobileMenuClose) {
            mobileMenuClose.addEventListener('click', closeMenu);
          }
        }
      });
    </script>
  </body>

  <style lang="scss">
    // 必要なmixin/functionをインポート
    @import '../styles/variables';
    @import '../styles/functions';
    @import '../styles/mixins';

    /* 基本構造 */
    .layout-container {
      display: grid;
      grid-template:
        'main'
        'footer'
        /1fr;
      min-height: 100vh;
      @include tablet-up {
        grid-template:
          'sidebar main'
          'sidebar footer'
          / tpx($sidebar-width) 1fr;
      }
      @include desktop-up {
        grid-template:
          'sidebar main'
          'sidebar footer'
          / ppx($sidebar-width) 1fr;
      }
    }

    /* メインコンテンツ */
    .main-content {
      grid-area: main;
      position: relative;
    }

    /* ヒーローセクション */
    .hero {
      width: 100%;
      height: 100svh; // スライドの高さを画面全体に合わせる
      overflow: hidden;
      position: relative;

      &__logo {
        position: absolute;
        top: spx(50);
        left: spx(40);
        width: spx(194);
        height: spx(117);
        z-index: 5;
        @include tablet-up {
          display: none;
        }
        @include desktop-up {
        }
        img {
          width: 100%;
          height: 100%;
          object-fit: cover;
        }
      }

      &__title {
        // タイトルのスタイル
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        text-align: center;
        color: #fff;
        z-index: 5;
      }

      &__title-text {
        // テキスト共通スタイル
        display: block;

        &--first {
          // 「自然」のスタイル
          font-size: spx(164);
          line-height: spx(213);
          letter-spacing: spx(65);
          white-space: nowrap;
          @include tablet-up {
            font-size: ppx(229) * 1.2;
            line-height: ppx(298) * 1.2;
            letter-spacing: ppx(91) * 1.2;
          }
          @include desktop-up {
            font-size: ppx(229);
            line-height: ppx(298);
            letter-spacing: ppx(91);
          }
        }

        &--second {
          // 「から」のスタイル
          font-size: spx(87);
          line-height: 146%;
          letter-spacing: spx(17);
          @include tablet-up {
            font-size: ppx(121) * 1.2;
            line-height: 146%;
            letter-spacing: ppx(24) * 1.2;
          }
          @include desktop-up {
            font-size: ppx(121);
            line-height: 146%;
            letter-spacing: ppx(24);
          }
        }

        &--third {
          // 「学ぶ」のスタイル
          font-size: spx(164);
          line-height: spx(213);
          letter-spacing: spx(65);
          @include tablet-up {
            font-size: ppx(229) * 1.2;
            line-height: ppx(298) * 1.2;
            letter-spacing: ppx(91) * 1.2;
          }
          @include desktop-up {
            font-size: ppx(229);
            line-height: ppx(298);
            letter-spacing: ppx(91);
          }
        }

        &--fourth {
          // 「Learn from Nature」のスタイル
          text-align: center;
          font-size: spx(32.276);
          font-weight: 500;
          line-height: apx(41.959);
          letter-spacing: spx(3.228);
          margin-top: spx(22);
          @include tablet-up {
            font-size: ppx(45) * 1.2;
            line-height: ppx(58) * 1.2;
            letter-spacing: ppx(4.5) * 1.2;
            margin-top: ppx(28) * 1.2;
          }
          @include desktop-up {
            font-size: ppx(45);
            line-height: ppx(58);
            letter-spacing: ppx(4.5);
            margin-top: ppx(28);
          }
        }
      }

      &__movie {
        // 動画セクションのスタイル
        position: absolute;
        right: spx(32);
        bottom: spx(25);
        z-index: 5;
        opacity: 1;
        visibility: visible;
        transition:
          opacity 0.3s ease,
          visibility 0.3s ease;

        cursor: pointer;
        @include tablet-up {
          right: ppx(50) * 1.2;
          bottom: ppx(60) * 1.2;
        }
        @include desktop-up {
          right: ppx(50);
          bottom: ppx(60);
        }

        &-container {
          // 動画コンテナのスタイル
          border: solid 1px #fff;
          border-radius: spx(12);
          overflow: hidden;
          width: spx(309);
          height: spx(220);
          @include tablet-up {
            border-radius: ppx(20) * 1.2;
            width: ppx(515) * 1.2;
            height: ppx(369) * 1.2;
          }
          @include desktop-up {
            border-radius: ppx(20);
            width: ppx(515);
            height: ppx(369);
          }
        }

        &-thumbnail {
          // サムネイル画像のスタイル
          width: 100%;
          height: 100%;
          display: block;
          img {
            width: 100%;
            height: 100%;
            object-fit: cover;
            object-position: center;
          }

          @include desktop-up {
            @include hover {
              &:hover {
                ~ .hero__movie-controls .hero__movie-play-icon {
                  transform: scale(1.2); // 画像ホバー時にアイコンを拡大
                }
              }
            }
          }
        }

        &-close {
          // 閉じるボタンのスタイル
          position: absolute;
          top: spx(-15);
          right: spx(-13);
          width: spx(45);
          height: spx(45);
          @include tablet-up {
            top: ppx(-22) * 1.2;
            right: ppx(-23) * 1.2;
            width: ppx(65) * 1.2;
            height: ppx(65) * 1.2;
          }
          @include desktop-up {
            top: ppx(-22);
            right: ppx(-23);
            width: ppx(65);
            height: ppx(65);
          }
          svg {
            width: 100%;
            height: 100%;
            circle {
              @include desktop-up {
                transition: fill 0.3s ease; // ホバー時の背景色変化
              }
            }
            path {
              @include desktop-up {
                transition: stroke 0.3s ease; // ホバー時の線色変化
              }
            }
          }

          @include desktop-up {
            @include hover {
              &:hover {
                svg {
                  circle {
                    fill: $green-2; // 背景を緑色に
                  }
                  path {
                    stroke: white; // 線を白色に
                  }
                }
              }
            }
          }
        }

        &-controls {
          // 操作エリアのスタイル
          position: absolute;
          left: 50%;
          top: spx(48);
          transform: translateX(-50%);
          display: flex;
          flex-direction: column;
          align-items: center;
          gap: spx(27);
          @include tablet-up {
            top: ppx(81) * 1.2;
            gap: ppx(48) * 1.2;
          }
          @include desktop-up {
            top: ppx(81);
            gap: ppx(48);
          }
        }

        &-play-icon {
          // 再生アイコンのスタイル
          width: spx(65);
          height: spx(65);
          @include tablet-up {
            width: ppx(109) * 1.2;
            height: ppx(109) * 1.2;
          }
          @include desktop-up {
            width: ppx(109);
            height: ppx(109);
            transform: scale(1);
            transition: transform 0.3s ease; // ホバー時の拡大効果
          }
          svg {
            width: 100%;
            height: 100%;
            circle {
            }
            path {
            }
          }
        }

        &-play-text {
          // 再生テキストのスタイル
          color: #fff;
          text-align: center;
          font-size: spx(24);
          line-height: spx(20);
          letter-spacing: spx(1.2);
          @include tablet-up {
            font-size: ppx(34) * 1.2;
            line-height: ppx(34) * 1.2;
            letter-spacing: ppx(1.7) * 1.2;
          }
          @include desktop-up {
            font-size: ppx(34);
            line-height: ppx(34);
            letter-spacing: ppx(1.7);
          }
        }

        &-controls {
          // 操作エリアのスタイル
          position: absolute;
          left: 50%;
          top: spx(48);
          transform: translateX(-50%);
          display: flex;
          flex-direction: column;
          align-items: center;
          gap: spx(27);
          @include tablet-up {
            top: ppx(81) * 1.2;
            gap: ppx(48) * 1.2;
          }
          @include desktop-up {
            top: ppx(81);
            gap: ppx(48);
          }

          // Controls全体のホバー効果
          @include desktop-up {
            @include hover {
              &:hover {
                .hero__movie-play-icon {
                  transform: scale(1.2); // Controlsホバー時にアイコンを拡大
                }
              }
            }
          }
        }
      }
    }
    /* Swiperスタイル */
    .swiper {
      width: 100%;
      height: 100%;
    }

    .swiper-slide {
      display: block;
      width: 100%;
      height: 100%;
    }

    .slide-content {
      display: block;
      width: 100%;
      height: 100%;
      picture {
        display: block;
        width: 100%;
        height: 100%;
        img {
          width: 100%;
          height: 100%;
          object-fit: cover;
          object-position: center;
        }
      }
    }

    @keyframes hero-zoom-out {
      0% {
        transform: scale(1.12);
      }
      100% {
        transform: scale(1);
      }
    }

    /* 基本状態: 拡大 */
    .swiper-slide img {
      transform: scale(1.12);
    }

    /* アクティブ時: ズームアウト実行 */
    .swiper-slide-active img {
      animation: hero-zoom-out 4s ease-out forwards;
      /* 
       * アニメーション時間の調整について:
       * - 必須条件: アニメーション時間 < autoplay.delay（スライド表示時間）
       * - 現在の設定: 4秒アニメーション < 5秒表示時間 = OK
       * - 推奨計算: アニメーション時間 ≤ 表示時間 - 1秒（余裕を持たせる）
       * - 例: 表示時間5秒なら、アニメーション時間は4秒以下が安全
       */
    }

    /* 非アクティブ時: 完了状態保持 */
    .swiper-slide:not(.swiper-slide-active) img {
      transform: scale(1);
    }

    /* 動画モーダル */
    .video-modal {
      // 動画モーダルのスタイル
      position: fixed;
      top: 0;
      left: 0;
      z-index: 100;
      opacity: 0;
      visibility: hidden;
      transition:
        opacity 0.3s ease,
        visibility 0.3s ease;
      &__overlay {
        // オーバーレイ背景のスタイル
        background-color: rgba(255, 255, 255, 0.95);
        width: 100vw;
        height: 100svh;
        display: grid;
        place-items: center;
      }

      &__container {
        // モーダルコンテナのスタイル
        position: relative;
      }

      &__content {
        // 動画コンテンツのスタイル
        overflow: hidden;
        border-radius: spx(30);
        background-color: red;
        width: spx(627);
        height: spx(448);
        position: relative;
        @include tablet-up {
          border-radius: ppx(20) * 1.2;
          width: ppx(1680) * 1.2;
          height: ppx(945) * 1.2;
        }
        @include desktop-up {
          border-radius: ppx(20);
          width: ppx(1680);
          height: ppx(945);
        }
        iframe {
          width: 100%;
          height: 100%;
          border: none;
        }
      }

      &__close {
        // 閉じるボタンのスタイル
        position: absolute;
        left: 50%;
        bottom: spx(-10);
        transform: translate(-50%, 100%);
        width: spx(80);
        height: spx(80);
        cursor: pointer;
        @include tablet-up {
          bottom: ppx(-25) * 1.2;
          width: ppx(80) * 1.2;
          height: ppx(80) * 1.2;
        }
        @include desktop-up {
          bottom: ppx(-25);
          width: ppx(80);
          height: ppx(80);
        }
        svg {
          width: 100%;
          height: 100%;
          circle {
            @include desktop-up {
              transition: fill 0.3s ease; // ホバー時の背景色変化
            }
          }
          path {
            // パスの色は白のまま（変更なし）
          }
        }

        @include desktop-up {
          @include hover {
            &:hover {
              svg {
                circle {
                  fill: $green-2; // 背景を緑色に
                }
              }
            }
          }
        }
      }
    }
    /* 宿泊予約モーダル */
    .booking-modal {
      position: fixed;
      top: 0;
      left: 0;
      z-index: 110;
      opacity: 0;
      visibility: hidden;
      transition:
        opacity 0.3s ease,
        visibility 0.3s ease;
      &__overlay {
        background-color: rgba(255, 255, 255, 0.95);
        width: 100vw;
        height: 100svh;
        display: grid;
        place-items: center;
      }

      &__container {
        position: relative;
      }

      &__content {
      }

      &__nav {
      }

      &__list {
        display: flex;
        flex-direction: column;
        gap: spx(30);
        @include tablet-up {
          flex-direction: row;
          gap: ppx(50) * 1.2;
        }
        @include desktop-up {
          gap: ppx(50);
        }
      }

      &__item {
      }

      &__link {
        display: grid;
        place-items: center;
        width: spx(502);
        height: spx(120);
        border: solid 1px $blue_6;
        border-radius: spx(15);
        position: relative;
        transition:
          background-color 0.3s ease,
          border-color 0.3s ease;
        @include tablet-up {
          width: ppx(749) * 1.2;
          height: ppx(152) * 1.2;
          border-radius: ppx(30) * 1.2;
        }
        @include desktop-up {
          width: ppx(749);
          height: ppx(152);
          border-radius: ppx(30);
        }

        @include desktop-up {
          @include hover {
            &:hover {
              background-color: $green-2;
              border-color: $green-2;

              .booking-modal__text {
                color: white;
              }

              .booking-modal__arrow path {
                stroke: white;
              }
            }
          }
        }
      }

      &__text {
        color: $blue_6;
        font-size: spx(30);
        line-height: spx(45);
        letter-spacing: spx(6);
        transition: color 0.3s ease;
        @include tablet-up {
          font-size: ppx(38) * 1.2;
          line-height: ppx(57) * 1.2;
          letter-spacing: ppx(7.6) * 1.2;
        }
        @include desktop-up {
          font-size: ppx(38);
          line-height: ppx(57);
          letter-spacing: ppx(7.6);
        }
      }

      &__arrow {
        width: spx(16);
        height: spx(32);
        position: absolute;
        top: 50%;
        right: spx(33);
        transform: translateY(-50%);
        @include tablet-up {
          width: ppx(20) * 1.2;
          height: ppx(40) * 1.2;
          right: ppx(43) * 1.2;
        }
        @include desktop-up {
          width: ppx(20);
          height: ppx(40);
          right: ppx(43);
        }
        path {
          transition: stroke 0.3s ease;
        }
      }

      &__close {
        position: absolute;
        left: 50%;
        bottom: spx(-30);
        transform: translate(-50%, 100%);
        width: spx(80);
        height: spx(80);
        cursor: pointer;
        @include tablet-up {
          bottom: ppx(-57) * 1.2;
          width: ppx(80) * 1.2;
          height: ppx(80) * 1.2;
        }
        @include desktop-up {
          bottom: ppx(-57);
          width: ppx(80);
          height: ppx(80);
        }
        svg {
          width: 100%;
          height: 100%;
          circle {
            @include desktop-up {
              transition: fill 0.3s ease; // ホバー時の背景色変化
            }
          }
          path {
            // パスの色は白のまま（変更なし）
          }
        }

        @include desktop-up {
          @include hover {
            &:hover {
              svg {
                circle {
                  fill: $green-2; // 背景を緑色に
                }
              }
            }
          }
        }
      }
    }
  </style>
</html>
