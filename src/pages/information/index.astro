---
// ============================================================
// 汎用ページテンプレート
// 使い方：このファイルをコピーして、ファイル名を変更して使用
// 例：cp src/pages/_template.astro src/pages/about.astro
// ============================================================

// 必須インポート
import BaseLayout from '../../layouts/BaseLayout.astro';
import LowerPageHeader from '../../components/ui/LowerPageHeader.astro';
import Breadcrumb from '../../components/ui/Breadcrumb.astro';

// インフォメーションデータのインポート（microCMSから取得）
import {
  getAllInformationPosts,
  formatDate,
} from '../../lib/informationAPI';

// microCMSから全ての記事を取得（既に日付降順でソート済み）
const informationPosts = await getAllInformationPosts();

// カテゴリーの一覧を固定順序で定義（お知らせ → イベント情報 → ブログ記事）
const categories = ['お知らせ', 'イベント情報', 'ブログ記事'];

// 全ての記事を日付の新しい順にソート
const sortedPosts = [...informationPosts].sort(
  (a, b) => new Date(b.publishedAt || b.createdAt).getTime() - new Date(a.publishedAt || a.createdAt).getTime()
);

// ============================================================
// TODO: 以下の項目を必ず変更してください
// ============================================================

// ページ固有のクラス名（page-nameを適切な名前に変更）
const pageClass = 'main-content--information';
---

<BaseLayout pageTitle="インフォメーション" pageClass={pageClass}>
  <!-- ============================================================ -->
  <!-- TODO: titleEn, titleJa, Breadcrumbのテキストを変更 -->
  <!-- ============================================================ -->

  <!-- ページヘッダー -->
  <div class="page-header-container">
    <LowerPageHeader titleEn="INFORMATION" titleJa="インフォメーション" />
  </div>

  <!-- メインコンテンツ -->
  <section class="information-list">
    <div class="information-list__container">
      <nav class="information-list__filter">
        {
          categories.map((category, index) => (
            <button
              class={`information-list__filter-button ${
                index === 0 ? 'information-list__filter-button--active' : ''
              }`}
              data-category={category}
            >
              <span class="information-list__filter-text">
                {category === 'ブログ記事' ? 'ブログ' : category}
              </span>
            </button>
          ))
        }
      </nav>

      <div class="information-list__items">
        {
          sortedPosts.map((post) => {
            const dateInfo = formatDate(post.publishedAt || post.createdAt);

            // ブログカテゴリーの場合は別のHTML構造を使用
            if (post.category[0] === 'ブログ記事') {
              const thumbnailUrl = post.thumbnail?.url || '/images/default-thumbnail.jpg';

              return (
                <article
                  class="information-list__blog-item"
                  data-category={post.category[0]}
                >
                  <a
                    href={`/information/${post.slug}`}
                    class="information-list__blog-link"
                  >
                    <figure class="information-list__blog-image">
                      <img
                        class="information-list__blog-img"
                        src={thumbnailUrl}
                        alt={post.title}
                      />
                      <figcaption class="information-list__blog-date">
                        <time
                          class="information-list__blog-time"
                          datetime={post.publishedAt || post.createdAt}
                        >
                          <span class="information-list__blog-year-month">
                            {dateInfo.year}.{dateInfo.month}
                          </span>
                          <span class="information-list__blog-day">
                            {dateInfo.day}
                          </span>
                        </time>
                      </figcaption>
                    </figure>
                    <h3 class="information-list__blog-title">{post.title}</h3>
                  </a>
                </article>
              );
            }

            // お知らせ・イベント情報用の既存レイアウト
            return (
              <article
                class="information-list__item"
                data-category={post.category[0]}
              >
                <a
                  href={`/information/${post.slug}`}
                  class="information-list__link"
                >
                  <div class="information-list__content">
                    <time class="information-list__date" datetime={post.publishedAt || post.createdAt}>
                      <span class="information-list__date-month">
                        {dateInfo.year}.{dateInfo.month}
                      </span>
                      <span class="information-list__date-day">
                        {dateInfo.day}
                      </span>
                    </time>
                    <div class="information-list__text">
                      <span class="information-list__category">
                        {post.category[0]}
                      </span>
                      <h3 class="information-list__title">{post.title}</h3>
                    </div>
                  </div>
                </a>
              </article>
            );
          })
        }
      </div>
    </div>
  </section>

  <!-- パンくずリスト -->
  <div class="breadcrumb-wrapper">
    <Breadcrumb
      items={[{ text: 'TOP', href: '/' }, { text: 'インフォメーション' }]}
    />
  </div>
</BaseLayout>

<style lang="scss">
  @import '../../styles/variables';
  @import '../../styles/functions';
  @import '../../styles/mixins';

  :global(.main-content--information) {
    background: var(--blue_2, #e7f3f9);
    padding-top: spx(110);
    @include tablet-up {
      padding-top: ppx(280 * 1.2);
    }
    @include desktop-up {
      padding-top: ppx(280);
    }
  }

  .page-header-container {
    @include tablet-up {
      margin-left: ppx(233 * 1.2);
    }
    @include desktop-up {
      margin-left: ppx(233);
    }
  }

  // ============================================================
  // Information List Styles
  // ============================================================

  .information-list {
    margin-top: spx(100);
    @include tablet-up {
      margin-top: ppx(151 * 1.2);
    }
    @include desktop-up {
      margin-top: ppx(151);
    }
    &__container {
    }

    &__filter {
      display: flex;
      gap: spx(7);
      justify-content: center;
      @include tablet-up {
        gap: ppx(18 * 1.2);
      }
      @include desktop-up {
        gap: ppx(18);
      }
    }

    &__filter-button {
      display: flex;
      align-items: center;
      justify-content: center;
      border-radius: spx(15);
      border: spx(2) solid var(--blue_5, #026995);
      background: var(--white, #fff);
      flex-shrink: 0;
      width: spx(210);
      height: spx(63);
      transition:
        background 0.3s ease,
        border 0.3s ease;
      @include tablet-up {
        width: ppx(454 * 1.2);
        height: ppx(99 * 1.2);
        border-radius: ppx(20 * 1.2);
        border: ppx(2 * 1.2) solid var(--blue_5, #026995);
      }
      @include desktop-up {
        width: ppx(454);
        height: ppx(99);
        border-radius: ppx(20);
        border: ppx(2) solid var(--blue_5, #026995);
      }

      &--active {
        background: var(--blue_5, #026995);

        .information-list__filter-text {
          color: var(--white, #fff);
        }
      }
      @include hover {
        &:hover {
          background: var(--green_2, #adc400);
          border: spx(2) solid var(--green_2, #adc400);
          @include tablet-up {
            border: ppx(2 * 1.2) solid var(--green_2, #adc400);
          }
          @include desktop-up {
            border: ppx(2) solid var(--green_2, #adc400);
          }
          .information-list__filter-text {
            color: var(--white, #fff);
          }
        }
      }
    }

    &__filter-text {
      color: var(--blue_5, #026995);
      text-align: center;
      font-family: 'Zen Kaku Gothic New';
      font-size: spx(27);
      font-style: normal;
      font-weight: 400;
      line-height: 85%; /* 22.95px */
      transition: color 0.3s ease;
      @include tablet-up {
        font-size: ppx(33 * 1.2);
        line-height: ppx(33 * 1.2); /* 100% */
        letter-spacing: ppx(1.65 * 1.2);
      }
      @include desktop-up {
        font-size: ppx(33);
        line-height: ppx(33); /* 100% */
        letter-spacing: ppx(1.65);
      }
    }

    &__items {
      margin-top: spx(150);
      display: flex;
      flex-direction: column;
      gap: spx(30);
      width: spx(625);
      margin-inline: auto;
      @include tablet-up {
        margin-top: ppx(192 * 1.2);
        gap: ppx(60 * 1.2);
        width: ppx(1560 * 1.2);
      }
      @include desktop-up {
        margin-top: ppx(192);
        gap: ppx(60);
        width: ppx(1560);
      }
      &[data-active-category='ブログ記事'] {
        display: grid;
        grid-template-columns: max-content;
        gap: spx(70);
        justify-content: center;
        @include tablet-up {
          grid-template-columns: max-content max-content max-content;
          gap: ppx(130 * 1.2) ppx(30 * 1.2);
        }
        @include desktop-up {
          gap: ppx(130) ppx(30);
        }
      }
    }

    &__item {
      @include tablet-up {
      }
      @include desktop-up {
      }
    }

    &__link {
      @include tablet-up {
      }
      @include desktop-up {
      }

      // ホバー効果
      @include hover {
        &:hover {
          // タイトルのテキスト色を変更
          .information-list__title {
            color: var(--green_2, #adc400);
          }
        }
      }
    }

    &__content {
      display: grid;
      grid-template-columns: spx(100) auto;
      gap: spx(20);
      position: relative;
      padding-bottom: spx(30);
      @include tablet-up {
        gap: ppx(11 * 1.2);
        padding-bottom: ppx(40 * 1.2);
        grid-template-columns: ppx(160 * 1.2) auto;
      }
      @include desktop-up {
        gap: ppx(11);
        padding-bottom: ppx(40);
        grid-template-columns: ppx(160) auto;
      }
      &::after {
        content: '';
        display: block;
        width: 100%;
        height: 1px;
        background: #59a1c0;
        position: absolute;
        bottom: 0;
        left: 0;
      }
    }

    &__date {
      display: flex;
      flex-direction: column;
      align-items: center;
      @include tablet-up {
      }

      @include desktop-up {
      }
    }

    &__date-month {
      color: var(--blue_6, #054965);
      text-align: center;
      font-family: 'Zen Kaku Gothic New';
      font-size: spx(26);
      font-style: normal;
      font-weight: 400;
      line-height: 100%; /* 26px */
      letter-spacing: spx(1.3);
      @include tablet-up {
        font-size: ppx(26 * 1.2);
        line-height: ppx(26 * 1.2); /* 100% */
        letter-spacing: ppx(1.3 * 1.2);
      }
      @include desktop-up {
        font-size: ppx(26);
        line-height: ppx(26); /* 100% */
        letter-spacing: ppx(1.3);
      }
    }

    &__date-day {
      color: var(--blue_6, #054965);
      text-align: center;
      font-family: 'Zen Kaku Gothic New';
      font-size: spx(95);
      font-style: normal;
      font-weight: 400;
      line-height: 90%; /* 85.5px */
      @include tablet-up {
        font-size: ppx(95 * 1.2);
        line-height: ppx(95 * 1.2); /* 100% */
        letter-spacing: ppx(4.75 * 1.2);
      }
      @include desktop-up {
        font-size: ppx(95);
        line-height: ppx(95); /* 100% */
        letter-spacing: ppx(4.75);
      }
    }

    &__text {
      display: flex;
      flex-direction: column;
      gap: spx(10);
      @include tablet-up {
        gap: ppx(23 * 1.2);
      }
      @include desktop-up {
        gap: ppx(23);
      }
    }

    &__category {
      display: flex;
      justify-content: center;
      align-items: center;
      border-radius: spx(10);
      background: var(--white, #fff);
      color: var(--blue_6, #054965);
      text-align: center;
      font-family: 'Zen Kaku Gothic New';
      font-size: spx(24);
      font-style: normal;
      font-weight: 400;
      line-height: spx(24); /* 100% */
      letter-spacing: spx(1.2);
      flex-shrink: 0;
      width: spx(160);
      height: spx(44);
      @include tablet-up {
        width: ppx(240 * 1.2);
        height: ppx(49 * 1.2);
        border-radius: ppx(12 * 1.2);
        font-size: ppx(24 * 1.2);
        line-height: ppx(24 * 1.2); /* 100% */
        letter-spacing: ppx(1.2 * 1.2);
      }
      @include desktop-up {
        width: ppx(240);
        height: ppx(49);
        border-radius: ppx(12);
        font-size: ppx(24);
        line-height: ppx(24); /* 100% */
        letter-spacing: ppx(1.2);
      }
    }

    &__title {
      color: var(--blue_6, #054965);
      font-family: 'Zen Kaku Gothic New';
      font-size: spx(30);
      font-style: normal;
      font-weight: 400;
      line-height: 150%; /* 45px */
      letter-spacing: spx(-0.6);
      transition: color 0.3s ease;
      @include tablet-up {
        font-size: ppx(33 * 1.2);
        line-height: 160%; /* 52.8px */
        letter-spacing: ppx(-1.65 * 1.2);
      }
      @include desktop-up {
        font-size: ppx(33);
        line-height: 160%; /* 52.8px */
        letter-spacing: ppx(-1.65);
      }
    }

    // ブログカテゴリー用のレイアウト
    &__blog-item {
      width: spx(500);
      @include tablet-up {
        width: ppx(500 * 1.2);
      }
      @include desktop-up {
        width: ppx(500);
      }
    }

    &__blog-link {
      display: flex;
      flex-direction: column;
      gap: spx(12);
      @include tablet-up {
        gap: ppx(24 * 1.2);
      }
      @include desktop-up {
        gap: ppx(24);
      }

      // ホバー効果
      @include hover {
        &:hover {
          // 画像のオーバーレイを表示
          .information-list__blog-image::after {
            opacity: 1;
          }

          // 日付と時刻のテキスト色を変更
          .information-list__blog-year-month,
          .information-list__blog-day {
            color: var(--green_2, #adc400);
          }

          // タイトルのテキスト色を変更
          .information-list__blog-title {
            color: var(--green_2, #adc400);
          }
        }
      }
    }

    &__blog-image {
      position: relative;
      width: max-content;
      border-radius: spx(20);
      overflow: hidden;

      @include tablet-up {
        border-radius: ppx(20 * 1.2);
      }
      @include desktop-up {
        border-radius: ppx(20);
      }
      &::after {
        content: '';
        display: block;
        width: 100%;
        height: 100%;
        background: rgba(255, 255, 255, 0.2);
        position: absolute;
        z-index: 1;
        top: 0;
        left: 0;
        opacity: 0;
        transition: opacity 0.3s ease;
        @include tablet-up {
        }
        @include desktop-up {
        }
      }
    }

    &__blog-img {
      display: block;
      width: spx(500);
      height: spx(500);
      object-fit: cover;
      @include tablet-up {
        width: ppx(500 * 1.2);
        height: ppx(500 * 1.2);
      }
      @include desktop-up {
        width: ppx(500);
        height: ppx(500);
      }
    }

    &__blog-date {
      width: spx(110);
      height: spx(115);
      flex-shrink: 0;
      border-radius: spx(20);
      background: var(--white, #fff);
      display: grid;
      place-items: center;
      position: absolute;
      top: spx(15);
      left: spx(15);
      z-index: 2;
      @include tablet-up {
        width: ppx(110 * 1.2);
        height: ppx(115 * 1.2);
        border-radius: ppx(20 * 1.2);
        top: ppx(20 * 1.2);
        left: ppx(20 * 1.2);
      }
      @include desktop-up {
        width: ppx(110);
        height: ppx(115);
        border-radius: ppx(20);
        top: ppx(20);
        left: ppx(20);
      }
    }

    &__blog-time {
      display: flex;
      flex-direction: column;
      align-items: center;
      @include tablet-up {
      }
      @include desktop-up {
      }
    }

    &__blog-year-month {
      color: var(--blue_6, #054965);
      text-align: center;
      font-family: 'Zen Kaku Gothic New';
      font-size: spx(22);
      font-style: normal;
      font-weight: 400;
      line-height: spx(22); /* 100% */
      letter-spacing: spx(0.44);
      transition: color 0.3s ease;
      @include tablet-up {
        font-size: ppx(22 * 1.2);
        line-height: ppx(22 * 1.2); /* 100% */
        letter-spacing: ppx(1.1 * 1.2);
      }
      @include desktop-up {
        font-size: ppx(22);
        line-height: ppx(22); /* 100% */
        letter-spacing: ppx(1.1);
      }
    }

    &__blog-day {
      color: var(--blue_6, #054965);
      text-align: center;
      font-family: 'Zen Kaku Gothic New';
      font-size: spx(71);
      font-style: normal;
      font-weight: 400;
      line-height: spx(71); /* 100% */
      margin-top: spx(-3);
      transition: color 0.3s ease;
      @include tablet-up {
        font-size: ppx(71 * 1.2);
        line-height: ppx(71 * 1.2); /* 100% */
        letter-spacing: ppx(3.55 * 1.2);
        margin-top: ppx(-3 * 1.2);
      }
      @include desktop-up {
        font-size: ppx(71);
        line-height: ppx(71); /* 100% */
        letter-spacing: ppx(3.55);
        margin-top: spx(-3);
      }
    }

    &__blog-title {
      color: var(--blue_6, #054965);
      font-family: 'Zen Kaku Gothic New';
      font-size: spx(29);
      font-style: normal;
      font-weight: 400;
      line-height: 150%; /* 43.5px */
      transition: color 0.3s ease;
      @include tablet-up {
        font-size: ppx(27 * 1.2);
      }
      @include desktop-up {
        font-size: ppx(27);
      }
    }
  }

  .breadcrumb-wrapper {
    margin: spx(120) 0 spx(40);
    @include tablet-up {
      margin: ppx(150 * 1.2) 0 ppx(70 * 1.2);
    }
    @include desktop-up {
      margin: ppx(150) 0 ppx(70);
    }
  }
</style>

<script>
  // フィルタリング機能の実装（URLクエリパラメータ対応）
  document.addEventListener('DOMContentLoaded', () => {
    const filterButtons = document.querySelectorAll<HTMLButtonElement>(
      '.information-list__filter-button'
    );
    const items = document.querySelectorAll<HTMLElement>(
      '.information-list__item, .information-list__blog-item'
    );

    // 全記事を表示する関数
    function showAllItems() {
      items.forEach((item) => {
        item.style.display = 'block';
      });
    }

    // カテゴリーでフィルタリングする関数
    function filterByCategory(selectedCategory: string | undefined) {
      if (!selectedCategory) {
        showAllItems();
        return;
      }

      items.forEach((item) => {
        const itemCategory = item.dataset.category;

        if (itemCategory === selectedCategory) {
          item.style.display = 'block';
        } else {
          item.style.display = 'none';
        }
      });
    }

    // URLを更新する関数
    function updateURL(category: string | undefined) {
      const url = new URL(window.location.href);

      if (category) {
        url.searchParams.set('category', category);
      } else {
        url.searchParams.delete('category');
      }

      // URLを更新（ページをリロードせずに）
      window.history.pushState({ category }, '', url);
    }

    // ボタンのアクティブ状態を設定する関数
    function setActiveButton(category: string | undefined) {
      filterButtons.forEach((btn) => {
        if (btn.dataset.category === category) {
          btn.classList.add('information-list__filter-button--active');
        } else {
          btn.classList.remove('information-list__filter-button--active');
        }
      });
    }

    // フィルターを適用する関数（カテゴリーとUI更新を含む）
    function applyFilter(category: string | undefined) {
      filterByCategory(category);
      setActiveButton(category);
      updateURL(category);

      // コンテナに現在のカテゴリーを設定
      const container = document.querySelector('.information-list__items');
      if (container) {
        container.setAttribute('data-active-category', category || '');
      }
    }

    // URLパラメータから初期カテゴリーを取得
    const urlParams = new URLSearchParams(window.location.search);
    const initialCategory = urlParams.get('category');

    // 初回表示時の処理
    if (initialCategory) {
      // URLにカテゴリーが指定されている場合
      applyFilter(initialCategory);
    } else {
      // URLにカテゴリーが指定されていない場合、最初のカテゴリーを選択
      const firstButton = filterButtons[0];
      if (firstButton) {
        const firstCategory = firstButton.dataset.category;
        applyFilter(firstCategory);
      }
    }

    // フィルターボタンのクリックイベント
    filterButtons.forEach((button) => {
      button.addEventListener('click', () => {
        const category = button.dataset.category;
        applyFilter(category);
      });
    });

    // ブラウザの戻る/進むボタンへの対応
    window.addEventListener('popstate', (event) => {
      const category = event.state?.category || urlParams.get('category');

      if (category) {
        filterByCategory(category);
        setActiveButton(category);
      } else {
        // カテゴリーが指定されていない場合、最初のカテゴリーを選択
        const firstButton = filterButtons[0];
        if (firstButton) {
          const firstCategory = firstButton.dataset.category;
          filterByCategory(firstCategory);
          setActiveButton(firstCategory);
        }
      }
    });
  });
</script>
