---
// BaseLayoutをインポート
import BaseLayout from '../../layouts/BaseLayout.astro';

// アクティビティ一覧ページ専用コンポーネント
import ActivityFilters from '../../components/pages/activities/ActivityFilters.astro';
import LowerPageHeader from '../../components/ui/LowerPageHeader.astro';
import Breadcrumb from '../../components/ui/Breadcrumb.astro';
import { getAllActivities } from '../../lib/activitiesAPI';
import { optimizeMicroCMSImage, generateSrcSet } from '../../utils/image';
import type { FilterOption } from '../../components/pages/activities/ActivityFilters.astro';

// microCMSからアクティビティデータを取得
const activities = await getAllActivities();

// フィルタオプション生成関数（3つのカテゴリに絞り込み）
function generateFilterOptions() {
  // 料金の選択肢を生成（カスタム順序）
  const priceSet = new Set<string>();
  activities.forEach((activity) => {
    // priceAdultを使用して料金範囲を判定
    const price = activity.priceAdult;
    if (price >= 500 && price < 1000) priceSet.add('500円から1000円');
    else if (price >= 1000 && price < 3000) priceSet.add('1000円から3000円');
    else if (price >= 3000 && price < 5000) priceSet.add('3000円から5000円');
    else if (price >= 5000 && price <= 10000) priceSet.add('5000円から1万円');
    else if (price > 10000) priceSet.add('1万円以上');
  });

  // 料金の希望する順序を定義（安い順）
  const priceOrder = [
    '500円から1000円',
    '1000円から3000円',
    '3000円から5000円',
    '5000円から1万円',
    '1万円以上',
  ];
  const priceOptions: FilterOption[] = priceOrder
    .filter((price) => priceSet.has(price))
    .map((price) => ({
      value: price,
      label: price,
    }));

  // 所要時間の選択肢を生成（filterDurationHoursを使用）
  const durationSet = new Set<string>();
  activities.forEach((activity) => {
    if (activity.filterDurationHours) {
      const hours = activity.filterDurationHours;
      if (hours < 1) durationSet.add('1時間未満');
      else if (hours >= 1 && hours < 2) durationSet.add('1時間以上');
      else if (hours >= 2) durationSet.add('2時間以上');
    }
  });

  // 所要時間の希望する順序を定義（短い順）
  const durationOrder = ['1時間未満', '1時間以上', '2時間以上'];
  const durationOptions: FilterOption[] = durationOrder
    .filter((duration) => durationSet.has(duration))
    .map((duration) => ({
      value: duration,
      label: duration,
    }));

  // 天気の選択肢を生成（filterWeatherを使用・配列対応）
  const weatherSet = new Set<string>();
  activities.forEach((activity) => {
    if (activity.filterWeather) {
      // 配列の場合は最初の要素を取得
      let weather = activity.filterWeather;
      if (Array.isArray(weather)) {
        weather = weather[0];
      }

      if (weather === 'all') weatherSet.add('全天候');
      else if (weather === 'sunny') weatherSet.add('晴れ');
      else if (weather === 'light-rain') weatherSet.add('小雨');
      else if (weather === 'rainy') weatherSet.add('雨天');
    }
  });

  // 天気の希望する順序を定義
  const weatherOrder = ['全天候', '晴れ', '小雨', '雨天'];
  const weatherOptions: FilterOption[] = weatherOrder
    .filter((weather) => weatherSet.has(weather))
    .map((weather) => ({
      value: weather,
      label: weather,
    }));

  return {
    priceOptions,
    durationOptions,
    weatherOptions,
  };
}

// フィルタオプションを生成
const filterOptions = generateFilterOptions();

// 各アクティビティのサムネイル画像を最適化（gallery[0]を使用）
const optimizedActivities = activities.map((activity) => ({
  ...activity,
  optimizedThumbnail: {
    url: optimizeMicroCMSImage(activity.gallery[0].url, {
      width: 500,
      format: 'webp',
      quality: 80,
    }),
    srcSet: generateSrcSet(activity.gallery[0].url, [460, 480, 500]),
  },
}));
---

<BaseLayout pageTitle="アクティビティ" pageClass="main-content--activities">
  <div class="page-header-container">
    <LowerPageHeader titleEn="ACTIVITIES" titleJa="アクティビティ" />
  </div>
  <section class="filter-section">
    <!-- タブレット以上用：フィルターパネル -->
    <div class="filter-section__desktop-panel">
      <h3 class="filter-section__title">絞り込み検索</h3>
      <ActivityFilters
        priceOptions={filterOptions.priceOptions}
        durationOptions={filterOptions.durationOptions}
        weatherOptions={filterOptions.weatherOptions}
      />
    </div>
    <button class="filter-section__reset"> リセットする </button>
  </section>

  <!-- アクティビティカード -->
  <section class="activity-showcase">
    {
      optimizedActivities.map((activity) => {
        return (
          <article class="activity-card">
            <a
              href={`/activities/${activity.slug}`}
              class="activity-card__link"
            >
              <div class="activity-card__image">
                <picture class="activity-card__picture">
                  <source
                    media="(min-width: 1024px)"
                    srcset={activity.optimizedThumbnail.srcSet}
                  />
                  <source
                    media="(min-width: 744px)"
                    srcset={activity.optimizedThumbnail.srcSet}
                  />
                  <img
                    src={activity.optimizedThumbnail.url}
                    alt={`${activity.title}の様子`}
                    class="activity-card__img"
                  />
                </picture>
              </div>
              <div class="activity-card__title">
                <h3 class="activity-card__name">
                  {activity.title.split('\n').map((line, index) => (
                    <>
                      {line}
                      {index < activity.title.split('\n').length - 1 && <br />}
                    </>
                  ))}
                </h3>
                <svg
                  class="activity-card__arrow-icon"
                  xmlns="http://www.w3.org/2000/svg"
                  viewBox="0 0 10 17"
                  fill="none"
                >
                  <path
                    d="M0.958984 15.9192L8.31898 8.55922L0.958984 1.19922"
                    stroke="#054965"
                    stroke-width="1.84"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                  />
                </svg>
              </div>
            </a>
            <div class="activity-card__info">
              <div class="activity-card__pricing">
                <div class="activity-card__badges">
                  {activity.badges &&
                    activity.badges.length > 0 &&
                    (() => {
                      // badges[0].badgeが配列の場合と文字列の場合の両方に対応
                      const badgeValues = activity.badges[0]?.badge;
                      const badgeArray = Array.isArray(badgeValues)
                        ? badgeValues
                        : [badgeValues];

                      // 各バッジを個別に表示（2文字ずつ改行）
                      return badgeArray
                        .filter((badge) => badge) // 空の値を除外
                        .map((badgeText) => {
                          // 4文字のバッジを2文字ずつに分割
                          const firstTwo = badgeText.slice(0, 2);
                          const lastTwo = badgeText.slice(2);

                          return (
                            <div class="activity-card__badge-group">
                              <span class="activity-card__badge">
                                {firstTwo}
                                {lastTwo && (
                                  <>
                                    <br />
                                    {lastTwo}
                                  </>
                                )}
                              </span>
                            </div>
                          );
                        });
                    })()}
                </div>
                <div class="activity-card__price">
                  ¥{activity.priceAdult.toLocaleString()}〜
                </div>
              </div>
              <dl class="activity-card__details">
                {activity.filterDurationHours && (
                  <div class="activity-card__detail-item">
                    <dt class="activity-card__detail-term">所要時間：</dt>
                    <dd class="activity-card__detail-desc">
                      約{activity.filterDurationHours}時間
                    </dd>
                  </div>
                )}
                {activity.filterAgeGroup && (
                  <div class="activity-card__detail-item">
                    <dt class="activity-card__detail-term">対象年齢：</dt>
                    <dd class="activity-card__detail-desc">
                      {(() => {
                        let ageGroup = activity.filterAgeGroup;
                        // 配列の場合は最初の要素を取得
                        if (Array.isArray(ageGroup)) {
                          ageGroup = ageGroup[0];
                        }
                        if (ageGroup === 'all-ages') return '全年齢対象';
                        if (ageGroup === 'ages-3-and-up') return '3歳以上';
                        if (ageGroup === 'adults-only') return '大人のみ';
                        return '';
                      })()}
                    </dd>
                  </div>
                )}
                {activity.filterSeasons &&
                  activity.filterSeasons.length > 0 && (
                    <div class="activity-card__detail-item">
                      <dt class="activity-card__detail-term">実施時期：</dt>
                      <dd class="activity-card__detail-desc">
                        {activity.filterSeasons.join('・')}
                      </dd>
                    </div>
                  )}
              </dl>
            </div>
            <div class="activity-card__description">{activity.introText}</div>
          </article>
        );
      })
    }
  </section>
  <div class="breadcrumb-wrapper">
    <Breadcrumb
      items={[{ text: 'TOP', href: '/' }, { text: 'アクティビティ' }]}
    />
  </div>
</BaseLayout>

<script is:inline define:vars={{ activitiesData: optimizedActivities }}>
  // activities データをグローバルスコープに設定
  window.activitiesData = activitiesData;
</script>

<script>
  // DOMロード後に実行
  document.addEventListener('DOMContentLoaded', () => {
    // ============= アクティビティフィルタリング機能 =============

    // TypeScript型定義
    interface Activity {
      slug: string;
      title: string;
      priceAdult: number;
      filterDurationHours: number | null;
      filterWeather:
        | 'all'
        | 'sunny'
        | 'light-rain'
        | 'rainy'
        | ('all' | 'sunny' | 'light-rain' | 'rainy')[]
        | null;
      filterSeasons: string[] | null;
      filterDifficulty: string | null;
      filterAgeGroup:
        | 'all-ages'
        | 'adults-only'
        | 'ages-3-and-up'
        | ('all-ages' | 'adults-only' | 'ages-3-and-up')[]
        | null;
    }

    // microCMSからデータを動的に取得（グローバル変数経由）
    let activitiesData: Activity[];
    try {
      activitiesData = (window as any).activitiesData;

      if (!activitiesData) {
        return;
      }
    } catch (error: any) {
      return;
    }

    // フィルタ要素の取得（3つのカテゴリのみ）
    const filterSelects = {
      price: document.querySelector(
        'select[name="price"]'
      ) as HTMLSelectElement,
      duration: document.querySelector(
        'select[name="duration"]'
      ) as HTMLSelectElement,
      weather: document.querySelector(
        'select[name="weather"]'
      ) as HTMLSelectElement,
    };

    // 各フィルターの初期選択肢を保存（連動フィルタリング用）
    const initialOptions: Record<
      string,
      Array<{ value: string; text: string }>
    > = {};

    Object.entries(filterSelects).forEach(([key, select]) => {
      if (select) {
        initialOptions[key] = Array.from(select.options)
          .slice(1)
          .map((option) => ({
            value: option.value,
            text: option.textContent || '',
          }));
      }
    });

    // アクティビティカード要素を取得
    const activityCards = document.querySelectorAll('.activity-card');
    const activitiesSection = document.querySelector('.activity-showcase');

    // 「該当するアクティビティがありません」メッセージ要素を作成
    const noResultsMessage = document.createElement('div');
    noResultsMessage.className = 'no-results-message';
    noResultsMessage.innerHTML = `
            <p class="no-results-message__text">該当するアクティビティがありません</p>
            <p class="no-results-message__subtext">条件を変更してお試しください</p>
          `;
    noResultsMessage.style.display = 'none';
    if (activitiesSection) {
      activitiesSection.appendChild(noResultsMessage);
    }

    // 料金フィルターマッチング関数
    function matchesPriceFilter(
      priceAdult: number,
      filterValue: string
    ): boolean {
      switch (filterValue) {
        case '500円から1000円':
          return priceAdult >= 500 && priceAdult < 1000;
        case '1000円から3000円':
          return priceAdult >= 1000 && priceAdult < 3000;
        case '3000円から5000円':
          return priceAdult >= 3000 && priceAdult < 5000;
        case '5000円から1万円':
          return priceAdult >= 5000 && priceAdult <= 10000;
        case '1万円以上':
          return priceAdult > 10000;
        default:
          return false;
      }
    }

    // 所要時間フィルターマッチング関数
    function matchesDurationFilter(
      durationHours: number | null,
      filterValue: string
    ): boolean {
      if (!durationHours) return false;
      switch (filterValue) {
        case '1時間未満':
          return durationHours < 1;
        case '1時間以上':
          return durationHours >= 1 && durationHours < 2;
        case '2時間以上':
          return durationHours >= 2;
        default:
          return false;
      }
    }

    // 天気フィルターマッチング関数（配列対応）
    function matchesWeatherFilter(
      weather: string | string[] | null,
      filterValue: string
    ): boolean {
      if (!weather) return false;

      // 配列の場合は最初の要素を取得
      let weatherValue = weather;
      if (Array.isArray(weatherValue)) {
        weatherValue = weatherValue[0];
      }

      const weatherMap: Record<string, string> = {
        all: '全天候',
        sunny: '晴れ',
        'light-rain': '小雨',
        rainy: '雨天',
      };
      return weatherMap[weatherValue] === filterValue;
    }

    // 現在の選択状態から利用可能な選択肢を取得する関数（3つのカテゴリのみ）
    function getAvailableOptions() {
      const currentFilters = {
        price: filterSelects.price?.value || '',
        duration: filterSelects.duration?.value || '',
        weather: filterSelects.weather?.value || '',
      };

      // 各フィルターの利用可能な値を収集（3つのカテゴリのみ）
      const availableValues: Record<string, Set<string>> = {
        price: new Set(),
        duration: new Set(),
        weather: new Set(),
      };

      // アクティビティデータから現在の選択条件に合致するものを抽出
      activitiesData.forEach((activity) => {
        let matchesCurrentFilters = true;

        // 現在の選択フィルタ条件をチェック
        if (currentFilters.price) {
          if (!matchesPriceFilter(activity.priceAdult, currentFilters.price)) {
            matchesCurrentFilters = false;
          }
        }
        if (currentFilters.duration) {
          if (
            !matchesDurationFilter(
              activity.filterDurationHours,
              currentFilters.duration
            )
          ) {
            matchesCurrentFilters = false;
          }
        }
        if (currentFilters.weather) {
          if (
            !matchesWeatherFilter(
              activity.filterWeather,
              currentFilters.weather
            )
          ) {
            matchesCurrentFilters = false;
          }
        }

        // 条件に合致する場合、このアクティビティの選択肢をすべて追加
        if (matchesCurrentFilters) {
          // 料金の選択肢を追加
          const price = activity.priceAdult;
          if (price >= 500 && price < 1000)
            availableValues.price.add('500円から1000円');
          else if (price >= 1000 && price < 3000)
            availableValues.price.add('1000円から3000円');
          else if (price >= 3000 && price < 5000)
            availableValues.price.add('3000円から5000円');
          else if (price >= 5000 && price <= 10000)
            availableValues.price.add('5000円から1万円');
          else if (price > 10000) availableValues.price.add('1万円以上');

          // 所要時間の選択肢を追加
          if (activity.filterDurationHours) {
            const hours = activity.filterDurationHours;
            if (hours < 1) availableValues.duration.add('1時間未満');
            else if (hours >= 1 && hours < 2)
              availableValues.duration.add('1時間以上');
            else if (hours >= 2) availableValues.duration.add('2時間以上');
          }

          // 天気の選択肢を追加（配列対応）
          if (activity.filterWeather) {
            // 配列の場合は最初の要素を取得
            let weatherValue = activity.filterWeather;
            if (Array.isArray(weatherValue)) {
              weatherValue = weatherValue[0];
            }

            const weatherMap: Record<string, string> = {
              all: '全天候',
              sunny: '晴れ',
              'light-rain': '小雨',
              rainy: '雨天',
            };
            const weatherLabel = weatherMap[weatherValue];
            if (weatherLabel) availableValues.weather.add(weatherLabel);
          }
        }
      });

      return availableValues;
    }

    // フィルター選択肢を更新する関数
    function updateFilterOptions(changedFilterKey?: string) {
      const availableOptions = getAvailableOptions();

      Object.entries(filterSelects).forEach(([filterKey, select]) => {
        if (select && filterKey !== changedFilterKey) {
          const currentValue = select.value;
          const availableSet = availableOptions[filterKey];

          // 現在の選択肢をクリア（最初のoption「選択してください」は残す）
          const firstOption = select.options[0];
          select.innerHTML = '';
          select.appendChild(firstOption);

          // 利用可能な選択肢のみを追加
          initialOptions[filterKey].forEach((option) => {
            if (availableSet.has(option.value)) {
              const optionElement = document.createElement('option');
              optionElement.value = option.value;
              optionElement.textContent = option.text;

              // 以前選択されていた値があれば再選択
              if (option.value === currentValue) {
                optionElement.selected = true;
              }

              select.appendChild(optionElement);
            }
          });

          // 以前の選択値が利用できなくなった場合はリセット
          if (currentValue && !availableSet.has(currentValue)) {
            select.value = '';
          }
        }
      });
    }

    // フィルタリング関数（3つのカテゴリのみ）
    function filterActivities() {
      const filters = {
        price: filterSelects.price?.value || '',
        duration: filterSelects.duration?.value || '',
        weather: filterSelects.weather?.value || '',
      };

      let visibleCount = 0;

      activityCards.forEach((card, index) => {
        if (index >= activitiesData.length) {
          return;
        }

        const activity = activitiesData[index];
        let isVisible = true;

        // 各フィルタ条件をチェック
        if (filters.price) {
          isVisible =
            isVisible && matchesPriceFilter(activity.priceAdult, filters.price);
        }

        if (filters.duration) {
          isVisible =
            isVisible &&
            matchesDurationFilter(
              activity.filterDurationHours,
              filters.duration
            );
        }

        if (filters.weather) {
          isVisible =
            isVisible &&
            matchesWeatherFilter(activity.filterWeather, filters.weather);
        }

        // カードの表示/非表示
        (card as HTMLElement).style.display = isVisible ? 'block' : 'none';
        if (isVisible) visibleCount++;
      });

      // 該当なしメッセージの表示制御
      if (noResultsMessage) {
        noResultsMessage.style.display = visibleCount === 0 ? 'block' : 'none';
      }
    }

    // 各selectタグに連動フィルタリング対応のchangeイベントリスナーを追加
    Object.entries(filterSelects).forEach(([filterKey, select]) => {
      if (select) {
        select.addEventListener('change', () => {
          // フィルタリング実行
          filterActivities();
          // 他のフィルター選択肢を更新
          updateFilterOptions(filterKey);
        });
      }
    });

    // 初期化完了（プロダクション準備完了）

    // 初期化時に利用可能な選択肢のみを表示
    updateFilterOptions();

    // ============= リセット機能 =============

    // リセットボタンの取得
    const resetButton = document.querySelector(
      '.filter-section__reset'
    ) as HTMLElement | null;

    // リセット機能の実装
    function resetFilters() {
      // 全てのフィルタ選択肢をリセット
      Object.values(filterSelects).forEach((select) => {
        if (select) {
          select.value = '';
        }
      });

      // 全てのアクティビティカードを表示
      activityCards.forEach((card) => {
        (card as HTMLElement).style.display = 'block';
      });

      // 該当なしメッセージを非表示
      if (noResultsMessage) {
        noResultsMessage.style.display = 'none';
      }

      // フィルタオプションを初期状態に戻す
      updateFilterOptions();

      // ページの最上部にスムーズスクロール
      window.scrollTo({
        top: 0,
        behavior: 'smooth',
      });
    }

    // リセットボタンにイベントリスナーを追加
    if (resetButton) {
      resetButton.addEventListener('click', resetFilters);
    }
  });
</script>

<style lang="scss">
  // 必要なmixin/functionをインポート
  @import '../../styles/variables';
  @import '../../styles/functions';
  @import '../../styles/mixins';

  /* アクティビティ一覧ページ専用スタイル */
  :global(.main-content--activities) {
    background: var(--blue_2, #e7f3f9);
    padding-top: spx(110);
    @include tablet-up {
      padding-top: ppx(280 * 1.2);
    }
    @include desktop-up {
      padding-top: ppx(280);
    }
  }

  /* ページヘッダーコンテナ */
  .page-header-container {
    margin-bottom: spx(68);
    @include tablet-up {
      margin-left: ppx(233 * 1.2);
      margin-bottom: ppx(101 * 1.2);
    }
    @include desktop-up {
      margin-left: ppx(233);
      margin-bottom: ppx(101);
    }
  }

  /* フィルターセクション */
  .filter-section {
    padding-top: spx(15);
    padding-bottom: spx(15);
    background: #e4f1f8;
    position: sticky;
    top: 0;
    z-index: 10;

    @include tablet-up {
      padding-top: ppx(45 * 1.2);
      padding-bottom: ppx(45 * 1.2);
      box-shadow: 0 ppx(7 * 1.2) ppx(7 * 1.2) 0 rgba(0, 0, 0, 0.1);
    }
    @include desktop-up {
      padding-top: ppx(45);
      padding-bottom: ppx(45);
      box-shadow: 0 ppx(7) ppx(7) 0 rgba(0, 0, 0, 0.1);
    }

    &__desktop-panel {
      @include tablet-up {
        display: flex;
        align-items: center;
        gap: ppx(37 * 1.2);
        margin-left: ppx(233 * 0.1);
      }
      @include desktop-up {
        gap: ppx(37);
        margin-left: ppx(233);
      }
    }

    &__title {
      display: block;
      color: var(--blue_6, #054965);
      font-family: 'Zen Kaku Gothic New';
      font-size: spx(30);
      font-style: normal;
      font-weight: 400;
      line-height: spx(30); /* 100% */
      letter-spacing: spx(0.9);
      text-align: center;
      margin-bottom: spx(30);
      @include tablet-up {
        text-align: left;
        font-size: ppx(30 * 1.2);
        line-height: ppx(30 * 1.2); /* 100% */
        letter-spacing: ppx(0.9 * 1.2);
        margin-bottom: 0;
      }
      @include desktop-up {
        font-size: ppx(30);
        line-height: ppx(30); /* 100% */
        letter-spacing: ppx(0.9);
      }
    }
    &__reset {
      display: flex;
      align-items: center;
      justify-content: center;
      color: white;
      font-family: 'Zen Kaku Gothic New';
      font-size: spx(26);
      font-style: normal;
      font-weight: 400;
      line-height: spx(26); /* 100% */
      letter-spacing: spx(0.9);
      text-align: center;
      margin-bottom: spx(30);
      margin-top: spx(40);
      margin-inline: auto;
      border-radius: spx(30);
      background: var(--blue_4, #59a1c0);
      width: spx(260);
      height: spx(60);

      @include tablet-up {
        text-align: left;
        font-size: ppx(26 * 1.2);
        line-height: ppx(26 * 1.2); /* 100% */
        letter-spacing: ppx(0.9 * 1.2);
        margin-bottom: ppx(30 * 1.2);
        margin-top: ppx(40 * 1.2);
        width: ppx(260 * 1.2);
        height: ppx(60 * 1.2);
      }
      @include desktop-up {
        font-size: ppx(26);
        line-height: ppx(26); /* 100% */
        letter-spacing: ppx(0.9);
        margin-bottom: ppx(30);
        margin-top: ppx(40);
        width: ppx(260);
        height: ppx(60);
      }
    }
  }

  /* アクティビティカードショーケース */
  .activity-showcase {
    padding-top: spx(68);
    padding-bottom: spx(100);
    display: grid;
    grid-template-columns: spx(576);
    gap: spx(120);
    justify-content: center;
    @include tablet-up {
      padding-top: ppx(160 * 1.2);
      padding-bottom: ppx(50 * 1.2);
      grid-template-columns: ppx(500 * 1.2) ppx(500 * 1.2) ppx(500 * 1.2);
      gap: ppx(140 * 1.2) ppx(110 * 1.2);
    }
    @include desktop-up {
      padding-top: ppx(180);
      padding-bottom: ppx(150);
      grid-template-columns: ppx(500) ppx(500) ppx(500);
      gap: ppx(140) ppx(110);
    }
  }

  /* アクティビティカード */
  .activity-card {
    $card-width-spx: 576;
    $card-width-tpx: 500 * 1.2;
    $card-width-ppx: 500;

    display: flex;
    flex-flow: column;
    align-items: center;
    width: spx($card-width-spx);
    margin-inline: auto;
    transition: all 0.3s ease;
    @include tablet-up {
      width: ppx($card-width-tpx);
    }
    @include desktop-up {
      width: ppx($card-width-ppx);
    }

    &__link {
      display: block;
      text-decoration: none;
      color: inherit;
      position: relative;

      @include hover {
        &:hover {
          .activity-card__image::after {
            opacity: 1;
          }
          .activity-card__title {
            background: var(--green_2, #adc400);
          }
          .activity-card__name {
            color: white;
          }
          .activity-card__arrow-icon path {
            stroke: white;
          }
        }
      }
    }

    &__image {
      position: relative;

      &::after {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(255, 255, 255, 0.3);
        border-radius: spx(20);
        opacity: 0;
        transition: opacity 0.3s ease;
        pointer-events: none;
        @include tablet-up {
          border-radius: ppx(20 * 1.2);
        }
        @include desktop-up {
          border-radius: ppx(20);
        }
      }
    }

    &__img {
      display: block;
      width: spx($card-width-spx);
      height: spx($card-width-spx);
      flex-shrink: 0;
      aspect-ratio: 1/1;
      border-radius: spx(20);
      object-fit: cover;
      @include tablet-up {
        width: ppx($card-width-tpx);
        height: ppx($card-width-tpx);
        border-radius: ppx(20 * 1.2);
      }
      @include desktop-up {
        width: ppx($card-width-ppx);
        height: ppx($card-width-ppx);
        border-radius: ppx(20);
      }
    }

    &__title {
      width: spx(358.4);
      height: auto;
      padding: spx(15) spx(50);
      flex-shrink: 0;
      border-radius: spx(120);
      background: rgba($color: #fff, $alpha: 0.9);
      display: grid;
      place-items: center;
      position: absolute;
      bottom: spx(28);
      left: 50%;
      transform: translateX(-50%);
      transition: background 0.3s ease;
      @include tablet-up {
        width: ppx(390 * 1.2);
        padding: ppx(15) * 1.2 ppx(50) * 1.2;
        border-radius: ppx(130 * 1.2);
        bottom: ppx(30 * 1.2);
      }
      @include desktop-up {
        width: ppx(390);
        padding: ppx(15) ppx(50);
        border-radius: ppx(130);
        bottom: ppx(30);
      }
    }

    &__name {
      color: var(--blue_6, #054965);
      text-align: center;
      font-size: spx(28.8);
      font-weight: 400;
      line-height: spx(28.8); /* 100% */
      letter-spacing: spx(-1.44);
      transition: color 0.3s ease;
      @include tablet-up {
        font-size: ppx(32 * 1.2);
        line-height: ppx(32 * 1.2); /* 100% */
        letter-spacing: ppx(-1.6 * 1.2);
      }
      @include desktop-up {
        font-size: ppx(32);
        line-height: ppx(32); /* 100% */
        letter-spacing: ppx(-1.6);
      }
    }

    &__arrow-icon {
      display: block;
      width: spx(7.36);
      position: absolute;
      top: 50%;
      right: spx(21);
      transform: translateY(-50%);
      @include tablet-up {
        width: ppx(8 * 1.2);
        right: ppx(24 * 1.2);
      }
      @include desktop-up {
        width: ppx(8);
        right: ppx(24);
      }

      path {
        transition: stroke 0.3s ease;
      }
    }

    &__info {
      display: flex;
      flex-flow: column;
      gap: spx(21.6);
      margin-top: spx(12);
      width: spx($card-width-spx);
      @include tablet-up {
        gap: ppx(25 * 1.2);
        margin-top: ppx(20 * 1.2);
        width: ppx($card-width-tpx);
      }
      @include desktop-up {
        gap: ppx(25);
        margin-top: ppx(20);
        width: ppx($card-width-ppx);
      }
    }

    &__pricing {
      display: flex;
      justify-content: space-between;
      align-items: center;
    }

    &__badges {
      display: flex;
      gap: spx(6.4);
      @include tablet-up {
        gap: ppx(5 * 1.2);
      }
      @include desktop-up {
        gap: ppx(5);
      }
    }

    &__badge-group {
      width: spx(80);
      height: spx(80);
      flex-shrink: 0;
      aspect-ratio: 1/1;
      border-radius: spx(11.04);
      background: var(--blue_5, #026995);
      display: grid;
      place-items: center;
      @include tablet-up {
        width: ppx(88 * 1.2);
        height: ppx(88 * 1.2);
        border-radius: ppx(12 * 1.2);
      }
      @include desktop-up {
        width: ppx(88);
        height: ppx(88);
        border-radius: ppx(12);
      }
    }

    &__badge {
      color: var(--white, #fff);
      text-align: center;
      font-family: 'Zen Kaku Gothic New';
      font-size: spx(21.6);
      font-style: normal;
      font-weight: 400;
      line-height: 130%; /* 28.08px */
      letter-spacing: spx(2.16);
      @include tablet-up {
        font-size: ppx(24 * 1.2);
        line-height: 130%; /* 31.2px */
        letter-spacing: ppx(2.4 * 1.2);
      }
      @include desktop-up {
        font-size: ppx(24);
        line-height: 130%; /* 31.2px */
        letter-spacing: ppx(2.4);
      }

      &--reservation {
      }

      &--group {
      }
    }

    &__price {
      color: var(--blue_5, #026995);
      text-align: right;
      font-family: 'Zen Kaku Gothic New';
      font-size: spx(36.8);
      font-style: normal;
      font-weight: 700;
      line-height: 130%; /* 47.84px */
      @include tablet-up {
        font-size: ppx(40 * 1.2);
        line-height: 130%; /* 52px */
      }
      @include desktop-up {
        font-size: ppx(40);
        line-height: 130%; /* 52px */
      }
    }

    &__details {
      display: flex;
      flex-flow: column;
      gap: spx(9.6);
      @include tablet-up {
        gap: ppx(12 * 1.2);
      }
      @include desktop-up {
        gap: ppx(12);
      }
    }

    &__detail-item {
      display: grid;
      grid-template-columns: 21vw auto;
      position: relative;
      padding-bottom: spx(9.6);
      padding-inline: spx(16);
      @include tablet-up {
        grid-template-columns: 6.4vw * 1.2 auto;
        padding-bottom: ppx(10 * 1.2);
        padding-inline: ppx(18 * 1.2);
      }
      @include desktop-up {
        grid-template-columns: 6.4vw auto;
        padding-bottom: ppx(10);
        padding-inline: ppx(18);
      }

      &:after {
        content: '';
        display: block;
        position: absolute;
        bottom: 0;
        left: 0;
        width: 100%;
        height: 1px;
        background: linear-gradient(
            to right,
            #026995,
            #026995 25%,
            rgba(0, 0, 0, 0) 25%,
            rgba(0, 0, 0, 0) 100%
          )
          0% 0%;
        background-size: 4px 1px;
      }
    }

    &__detail-term {
      color: var(--blue_5, #026995);
      font-family: 'Zen Kaku Gothic New';
      font-size: spx(24.8);
      font-style: normal;
      font-weight: 700;
      line-height: 135%; /* 33.48px */
      letter-spacing: spx(4.96);
      @include tablet-up {
        font-size: ppx(27 * 1.2);
        line-height: 150%; /* 40.5px */
        letter-spacing: ppx(5.4 * 1.2);
      }
      @include desktop-up {
        font-size: ppx(27);
        line-height: 150%; /* 40.5px */
        letter-spacing: ppx(5.4);
      }
    }

    &__detail-desc {
      color: var(--blue_5, #026995);
      font-family: 'Zen Kaku Gothic New';
      font-size: spx(24.8);
      font-style: normal;
      font-weight: 400;
      line-height: 130%; /* 32.24px */
      letter-spacing: spx(4.96);
      @include tablet-up {
        font-size: ppx(27 * 1.2);
        line-height: 150%;
        letter-spacing: ppx(5.4 * 1.2);
      }
      @include desktop-up {
        font-size: ppx(27);
        line-height: 150%;
        letter-spacing: ppx(5.4);
      }
    }
    &__description {
      color: var(--blue_5, #026995);
      font-family: 'Zen Kaku Gothic New';
      font-size: spx(30);
      font-style: normal;
      font-weight: 400;
      line-height: 160%; /* 48px */
      letter-spacing: spx(-0.6);
      width: spx(533);
      margin-inline: auto;
      margin-top: spx(20);
      @include tablet-up {
        font-size: ppx(27 * 1.2);
        letter-spacing: ppx(-1.35 * 1.2);
        width: ppx(464 * 1.2);
        margin-top: ppx(20 * 1.2);
      }
      @include desktop-up {
        font-size: ppx(27);
        letter-spacing: ppx(-1.35);
        width: ppx(464);
        margin-top: ppx(20);
      }
    }
  }
  .breadcrumb-wrapper {
    margin-top: spx(120);
    margin-bottom: spx(40);
    @include tablet-up {
      margin-top: ppx(150 * 1.2);
      margin-bottom: ppx(70 * 1.2);
    }
    @include desktop-up {
      margin-top: ppx(150);
      margin-bottom: ppx(70);
    }
  }

  // 該当なしメッセージのスタイル
  .no-results-message {
    text-align: center;
    padding: spx(100) spx(40);
    @include tablet-up {
      padding: ppx(150 * 1.2) ppx(60 * 1.2);
    }
    @include desktop-up {
      padding: ppx(150) ppx(60);
    }

    &__text {
      color: var(--blue_6, #054965);
      font-family: 'Zen Kaku Gothic New';
      font-size: spx(36);
      font-style: normal;
      font-weight: 700;
      line-height: spx(48);
      letter-spacing: spx(1.08);
      margin-bottom: spx(20);
      @include tablet-up {
        font-size: ppx(42 * 1.2);
        line-height: ppx(56 * 1.2);
        letter-spacing: ppx(1.26 * 1.2);
        margin-bottom: ppx(24 * 1.2);
      }
      @include desktop-up {
        font-size: ppx(42);
        line-height: ppx(56);
        letter-spacing: ppx(1.26);
        margin-bottom: ppx(24);
      }
    }

    &__subtext {
      color: var(--blue_5, #026995);
      font-family: 'Zen Kaku Gothic New';
      font-size: spx(26);
      font-style: normal;
      font-weight: 400;
      line-height: spx(36);
      letter-spacing: spx(0.78);
      @include tablet-up {
        font-size: ppx(28 * 1.2);
        line-height: ppx(38 * 1.2);
        letter-spacing: ppx(0.84 * 1.2);
      }
      @include desktop-up {
        font-size: ppx(28);
        line-height: ppx(38);
        letter-spacing: ppx(0.84);
      }
    }
  }
</style>
